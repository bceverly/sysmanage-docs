{
  "site": {
    "title": "SysManage - Modern System Management Platform",
    "description": "Modern system management platform for comprehensive infrastructure monitoring and automation"
  },
  "nav": {
    "features": "Features",
    "getting_started": "Getting Started",
    "documentation": "Documentation",
    "config_builder": "Configuration Builder",
    "github": "GitHub",
    "github_server": "Server GitHub",
    "github_agent": "Agent GitHub"
  },
  "hero": {
    "title": "Modern System Management Made Simple",
    "subtitle": "Centralized monitoring, management, and automation for your entire infrastructure. Support for Linux, Windows, macOS, FreeBSD, and OpenBSD.",
    "get_started": "Get Started",
    "view_github": "View on GitHub",
    "view_server_github": "Server GitHub",
    "view_agent_github": "Agent GitHub"
  },
  "features": {
    "title": "Key Features",
    "cross_platform": {
      "title": "Cross-Platform Support",
      "description": "Manage Linux, Windows, macOS, FreeBSD, and OpenBSD systems from a single interface."
    },
    "real_time": {
      "title": "Real-Time Monitoring",
      "description": "WebSocket-based real-time communication for instant system updates and monitoring."
    },
    "security": {
      "title": "Enterprise Security",
      "description": "JWT authentication, mTLS, role-based access control, and comprehensive security scanning."
    },
    "package_management": {
      "title": "Package Management",
      "description": "Remote software installation, updates, and management across all supported platforms."
    },
    "multilingual": {
      "title": "Multi-Language Support",
      "description": "Native support for 14 languages including English, Spanish, French, German, and more."
    },
    "modern_ui": {
      "title": "Modern Web UI",
      "description": "Responsive React-based interface with real-time dashboards and comprehensive reporting."
    },
    "osVersionUpgrades": {
      "title": "⬆️ OS Version Upgrades",
      "majorVersionDetection": {
        "title": "Major Version Detection",
        "description": "Automatic detection of available OS major version upgrades"
      },
      "multiPlatformSupport": {
        "title": "Multi-Platform Support",
        "description": "Ubuntu LTS upgrades, Fedora version upgrades, macOS updates, Windows feature updates"
      },
      "bsdSupport": {
        "title": "BSD Support",
        "description": "OpenBSD sysupgrade and FreeBSD version upgrades"
      },
      "opensuseIntegration": {
        "title": "OpenSUSE Integration",
        "description": "Distribution upgrade detection and management"
      },
      "safetyFeatures": {
        "title": "Safety Features",
        "description": "Dry-run capabilities and upgrade validation before deployment"
      },
      "rebootManagement": {
        "title": "Reboot Management",
        "description": "Automatic reboot scheduling for OS upgrades requiring system restart"
      }
    }
  },
  "quick_start": {
    "title": "Quick Start",
    "step1": {
      "title": "Install Server",
      "description": "Deploy the SysManage server on your infrastructure",
      "link": "Server Installation Guide →"
    },
    "step2": {
      "title": "Deploy Agents",
      "description": "Install agents on systems you want to manage",
      "link": "Agent Installation Guide →"
    },
    "step3": {
      "title": "Start Managing",
      "description": "Access the web interface and approve your agents",
      "link": "Getting Started Guide →"
    }
  },
  "architecture": {
    "title": "Architecture Documentation",
    "subtitle": "Technical documentation covering SysManage's system architecture, design patterns, and component interactions.",
    "system_overview": {
      "title": "System Overview",
      "subtitle": "Comprehensive overview of SysManage system architecture, components, and data flow patterns.",
      "architecture_overview": "Architecture Overview",
      "high_level_architecture": "High-Level Architecture",
      "core_components": "Core Components",
      "sysmanage_server": "SysManage Server",
      "sysmanage_agents": "SysManage Agents",
      "web_interface": "Web Interface",
      "rest_api": "REST API",
      "key_features": "Key Features",
      "data_flow_architecture": "Data Flow Architecture",
      "agent_server_communication": "Agent-to-Server Communication",
      "user_request_processing": "User Request Processing",
      "security_architecture": "Security Architecture",
      "certificate_based_auth": "Certificate-Based Authentication",
      "network_security": "Network Security",
      "transport_layer": "Transport Layer",
      "application_layer": "Application Layer",
      "data_layer": "Data Layer",
      "scalability_design": "Scalability Design",
      "horizontal_scaling": "Horizontal Scaling",
      "server_scaling": "Server Scaling",
      "agent_scaling": "Agent Scaling",
      "performance_characteristics": "Performance Characteristics",
      "agent_capacity": "Agent Capacity",
      "response_times": "Response Times",
      "resource_usage": "Resource Usage",
      "deployment_patterns": "Deployment Patterns",
      "single_instance": "Single Instance Deployment",
      "high_availability": "High Availability Deployment",
      "multi_region": "Multi-Region Deployment",
      "use_cases": "Use Cases",
      "architecture": "Architecture",
      "technology_stack": "Technology Stack",
      "backend_technologies": "Backend Technologies",
      "frontend_technologies": "Frontend Technologies",
      "communication_security": "Communication & Security",
      "devops_deployment": "DevOps & Deployment",
      "integration_points": "Integration Points",
      "external_system_integration": "External System Integration",
      "authentication_systems": "Authentication Systems",
      "monitoring_alerting": "Monitoring & Alerting",
      "automation_orchestration": "Automation & Orchestration",
      "package_repositories": "Package Repositories",
      "next_steps": "Next Steps",
      "agent_features": "Agent Features",
      "lightweight_design": "Lightweight Design",
      "lightweight_desc": "Minimal resource footprint",
      "auto_discovery": "Auto-Discovery",
      "auto_discovery_desc": "Automatic server detection on the network",
      "secure_communication": "Secure Communication",
      "secure_communication_desc": "mTLS and certificate-based authentication",
      "cross_platform": "Cross-Platform",
      "cross_platform_desc": "Native support for all major operating systems",
      "view_agent_repo": "View SysManage Agent Repository"
    },
    "agent_features": "Agent Features",
    "lightweight_design": "Lightweight Design",
    "lightweight_desc": "Minimal resource footprint",
    "auto_discovery": "Auto-Discovery",
    "auto_discovery_desc": "Automatic server detection on the network",
    "secure_communication": "Secure Communication",
    "secure_communication_desc": "mTLS and certificate-based authentication",
    "cross_platform": "Cross-Platform",
    "cross_platform_desc": "Native support for all major operating systems",
    "view_agent_repo": "View SysManage Agent Repository"
  },
  "docs": {
    "title": "Documentation - SysManage",
    "description": "Complete documentation for SysManage server and agent components.",
    "header": {
      "title": "Documentation",
      "subtitle": "Comprehensive guides for deploying, configuring, and managing SysManage."
    },
    "server": {
      "title": "Server Documentation",
      "description": "Complete guide for installing, configuring, and managing the SysManage server.",
      "installation": "Installation Guide",
      "configuration": "Configuration",
      "deployment": "Deployment",
      "features": "Features",
      "reports": "Reports & PDF Generation",
      "testing": "Testing & Playwright",
      "troubleshooting": "Troubleshooting",
      "view_docs": "View Server Docs →"
    },
    "agent": {
      "title": "Agent Documentation",
      "description": "Setup and management guide for SysManage agents across all platforms.",
      "installation": "Installation Guide",
      "configuration": "Configuration",
      "privileged_execution": "Privileged Execution",
      "cross_platform": "Cross-Platform Support",
      "troubleshooting": "Troubleshooting",
      "view_docs": "View Agent Docs →"
    },
    "api": {
      "title": "API Reference",
      "description": "Complete REST API documentation for integrating with SysManage.",
      "authentication": "Authentication",
      "hosts": "Host Management",
      "packages": "Package Management & Uninstallation",
      "websockets": "WebSocket API",
      "monitoring": "Monitoring",
      "view_docs": "View API Docs →"
    },
    "security": {
      "title": "Security",
      "description": "Security features, best practices, and vulnerability reporting.",
      "authentication": "Authentication & Authorization",
      "mtls": "Mutual TLS (mTLS)",
      "scanning": "Security Scanning",
      "best_practices": "Best Practices",
      "reporting": "Vulnerability Reporting",
      "view_docs": "View Security Docs →"
    },
    "getting_started": {
      "title": "Getting Started",
      "description": "Quick start guides and tutorials for new users.",
      "quick_start": "Quick Start",
      "webui_overview": "Web Interface Overview",
      "first_deployment": "First Deployment",
      "agent_approval": "Agent Approval",
      "basic_management": "Basic Management",
      "tutorials": "Tutorials",
      "view_docs": "Get Started →"
    },
    "administration": {
      "title": "Administration",
      "description": "Administrative guides for managing users, hosts, and system settings.",
      "user_management": "User Management",
      "host_management": "Host Management",
      "monitoring": "Monitoring & Alerts",
      "backup": "Backup & Recovery",
      "maintenance": "Maintenance",
      "view_docs": "View Admin Docs →"
    },
    "architecture": {
      "title": "Architecture",
      "description": "Technical architecture documentation including system design, message flow, and component interactions.",
      "message_flow": "Message Flow & Queuing",
      "testing_excellence": "Testing Excellence",
      "multi_os_cicd": "Multi-OS CI/CD Pipeline",
      "performance_testing": "Performance Testing Framework",
      "system_overview": "System Overview",
      "performance_metrics": "Performance & Scalability",
      "database_schema": "Database Design",
      "websocket_protocol": "Communication Protocols",
      "view_docs": "View Architecture →"
    },
    "additional_resources": {
      "title": "Additional Resources",
      "github_repo": "GitHub Repository",
      "issue_tracker": "Issue Tracker",
      "community_discussions": "Community Discussions",
      "agent_repo": "Agent Repository"
    }
  },
  "administration": {
    "title": "Administration",
    "subtitle": "Comprehensive system administration guides and procedures",
    "user_management": {
      "title": "User Management",
      "subtitle": "Complete guide to managing user accounts, roles, permissions, and authentication in SysManage.",
      "overview": "Overview",
      "user_account_management": "User Account Management",
      "creating_user_accounts": "Creating User Accounts",
      "web_interface": "Web Interface",
      "api_example": "API Example",
      "modifying_user_accounts": "Modifying User Accounts",
      "profile_updates": "Profile Updates",
      "administrative_updates": "Administrative Updates",
      "account_deactivation_deletion": "Account Deactivation and Deletion",
      "account_deactivation": "Account Deactivation",
      "account_deletion": "Account Deletion",
      "roles_permissions": "Roles and Permissions",
      "built_in_roles": "Built-in Roles",
      "administrator": "Administrator",
      "operator": "Operator",
      "viewer": "Viewer",
      "auditor": "Auditor",
      "permission_matrix": "Permission Matrix",
      "custom_roles": "Custom Roles",
      "creating_custom_roles": "Creating Custom Roles",
      "authentication_methods": "Authentication Methods",
      "local_authentication": "Local Authentication",
      "password_policy_configuration": "Password Policy Configuration",
      "multi_factor_authentication": "Multi-Factor Authentication (MFA)",
      "supported_mfa_methods": "Supported MFA Methods",
      "mfa_configuration": "MFA Configuration",
      "external_authentication": "External Authentication",
      "ldap_active_directory": "LDAP/Active Directory Integration",
      "saml_integration": "SAML 2.0 Integration",
      "oauth_openid": "OAuth 2.0 / OpenID Connect",
      "session_management": "Session Management",
      "session_policies": "Session Policies",
      "session_configuration": "Session Configuration",
      "active_session_monitoring": "Active Session Monitoring",
      "common_user_workflows": "Common User Management Workflows",
      "new_employee_onboarding": "New Employee Onboarding",
      "role_change_process": "Role Change Process",
      "employee_offboarding": "Employee Offboarding",
      "security_incident_response": "Security Incident Response",
      "security_best_practices": "Security Best Practices",
      "account_security": "Account Security",
      "authentication_security": "Authentication Security",
      "compliance_considerations": "Compliance Considerations",
      "troubleshooting_user_issues": "Troubleshooting User Issues",
      "login_problems": "Login Problems",
      "permission_issues": "Permission Issues",
      "integration_issues": "Integration Issues"
    },
    "host_management": {
      "title": "Host Management",
      "subtitle": "Comprehensive guide to organizing and managing hosts, agents, and infrastructure inventory across your environment.",
      "overview": "Overview",
      "key_concepts": "Key Concepts",
      "host_registration_approval": "Host Registration and Approval",
      "registration_process": "Registration Process",
      "approval_workflow": "Approval Workflow",
      "reviewing_pending_hosts": "Reviewing Pending Hosts",
      "approval_criteria": "Approval Criteria",
      "host_organization": "Host Organization",
      "host_groups": "Host Groups",
      "group_types": "Group Types",
      "creating_host_groups": "Creating Host Groups",
      "dynamic_group_assignment": "Dynamic Group Assignment",
      "tagging_metadata": "Tagging and Metadata",
      "common_tag_categories": "Common Tag Categories",
      "tag_management": "Tag Management",
      "agent_lifecycle_management": "Agent Lifecycle Management",
      "agent_deployment": "Agent Deployment",
      "deployment_methods": "Deployment Methods",
      "deployment_best_practices": "Deployment Best Practices",
      "agent_updates": "Agent Updates",
      "update_strategy": "Update Strategy",
      "update_process": "Update Process",
      "agent_troubleshooting": "Agent Troubleshooting",
      "common_issues": "Common Issues",
      "diagnostic_tools": "Diagnostic Tools",
      "inventory_management": "Infrastructure Inventory Management",
      "hardware_inventory": "Hardware Inventory",
      "collected_information": "Collected Information",
      "inventory_reports": "Inventory Reports",
      "software_inventory": "Software Inventory",
      "software_tracking": "Software Tracking",
      "software_reports": "Software Reports",
      "bulk_operations": "Bulk Operations",
      "mass_actions": "Mass Management Actions",
      "available_bulk_operations": "Available Bulk Operations",
      "bulk_operation_process": "Bulk Operation Process",
      "automation_integration": "Automation Integration",
      "configuration_management": "Configuration Management",
      "cloud_integration": "Cloud Integration",
      "best_practices": "Host Management Best Practices",
      "organizational_practices": "Organizational Best Practices",
      "operational_practices": "Operational Best Practices",
      "security_practices": "Security Best Practices"
    },
    "monitoring": {
      "title": "Monitoring & Alerts",
      "subtitle": "Comprehensive monitoring setup including alerting, performance metrics, and system health tracking for proactive infrastructure management.",
      "overview": "Overview",
      "monitoring_capabilities": "Monitoring Capabilities",
      "metrics_collection": "Metrics Collection",
      "system_performance_metrics": "System Performance Metrics",
      "cpu_metrics": "CPU Metrics",
      "memory_metrics": "Memory Metrics",
      "storage_metrics": "Storage Metrics",
      "network_metrics": "Network Metrics",
      "application_service_metrics": "Application and Service Metrics",
      "service_monitoring": "Service Monitoring",
      "database_monitoring": "Database Monitoring",
      "web_server_monitoring": "Web Server Monitoring",
      "custom_metrics": "Custom Metrics",
      "custom_script_monitoring": "Custom Script Monitoring",
      "api_integration": "API Integration",
      "alerting_system": "Alerting System",
      "alert_configuration": "Alert Configuration",
      "alert_types": "Alert Types",
      "threshold_configuration": "Threshold Configuration",
      "notification_channels": "Notification Channels",
      "supported_channels": "Supported Channels",
      "channel_configuration": "Channel Configuration",
      "escalation_management": "Escalation Management",
      "escalation_policies": "Escalation Policies",
      "alert_suppression": "Alert Suppression",
      "dashboard_configuration": "Dashboard Configuration",
      "dashboard_types": "Dashboard Types",
      "executive_dashboards": "Executive Dashboards",
      "operations_dashboards": "Operations Dashboards",
      "application_dashboards": "Application Dashboards",
      "infrastructure_dashboards": "Infrastructure Dashboards",
      "dashboard_customization": "Dashboard Customization",
      "widget_types": "Widget Types",
      "layout_options": "Layout Options",
      "access_control": "Access Control",
      "health_checks": "Health Check Configuration",
      "system_health": "System Health Checks",
      "core_system_checks": "Core System Checks",
      "service_health_checks": "Service Health Checks",
      "custom_health_checks": "Custom Health Checks",
      "performance_optimization": "Monitoring Performance Optimization",
      "data_retention": "Data Retention Policies",
      "retention_strategies": "Retention Strategies",
      "storage_optimization": "Storage Optimization",
      "collection_optimization": "Collection Optimization",
      "collection_intervals": "Collection Intervals",
      "agent_performance": "Agent Performance",
      "monitoring_best_practices": "Monitoring Best Practices",
      "alert_design": "Alert Design Best Practices",
      "dashboard_design": "Dashboard Design Best Practices",
      "operational_practices": "Operational Best Practices"
    }
  },
  "api": {
    "title": "API Reference",
    "subtitle": "Comprehensive API documentation for integrating with SysManage programmatically",
    "authentication": {
      "title": "Authentication API",
      "subtitle": "JWT-based authentication system for secure access to SysManage APIs with token refresh and session management.",
      "overview": "Overview",
      "authentication_flow": "Authentication Flow",
      "login": "Login",
      "refresh_token": "Refresh Token",
      "password_reset": "Password Reset",
      "reset_password": "Reset Password",
      "validate_reset_token": "Validate Reset Token",
      "path_parameters": "Path Parameters",
      "request_body": "Request Body",
      "response": "Response",
      "error_responses": "Error Responses",
      "example": "Example",
      "using_auth_tokens": "Using Authentication Tokens",
      "token_expiration": "Token Expiration",
      "security_best_practices": "Security Best Practices"
    },
    "hosts": {
      "title": "Host Management API",
      "subtitle": "Complete host and agent management including registration, system operations, and data collection.",
      "overview": "Overview",
      "fleet_management": "Fleet Management",
      "host_operations": "Host Operations",
      "hardware_system_info": "Hardware and System Information",
      "software_package_info": "Software and Package Information",
      "bulk_operations": "Bulk Operations",
      "important_notes": "Important Notes",
      "authentication_required": "Authentication Required"
    },
    "packages": {
      "title": "Package Management API",
      "subtitle": "Cross-platform package management for installing, updating, and removing software packages across your infrastructure.",
      "overview": "Overview",
      "package_discovery": "Package Discovery",
      "package_search": "Package Search",
      "package_installation": "Package Installation",
      "package_updates": "Package Updates",
      "os_upgrades": "OS Upgrades",
      "package_cache_management": "Package Cache Management",
      "query_parameters": "Query Parameters",
      "important_notes": "Important Notes"
    }
  },
  "getting_started": {
    "title": "Getting Started - SysManage",
    "description": "Quick start guides and tutorials to get up and running with SysManage for infrastructure monitoring and automation.",
    "breadcrumb": "Getting Started",
    "header": {
      "title": "Getting Started",
      "description": "Quick start guides and tutorials to get up and running with SysManage for infrastructure monitoring and automation."
    },
    "welcome": {
      "title": "Welcome to SysManage",
      "description": "SysManage is a comprehensive infrastructure monitoring and automation platform that helps you manage hosts, packages, and system health across your entire infrastructure. Whether you're managing a few servers or thousands of hosts, SysManage provides the tools you need to maintain and monitor your systems effectively."
    },
    "journey": {
      "title": "Your Journey Starts Here",
      "description": "Follow these guided steps to get SysManage up and running in your environment:",
      "steps": {
        "quick_start": {
          "title": "Quick Start",
          "description": "Get SysManage installed and running in minutes"
        },
        "deployment": {
          "title": "First Deployment",
          "description": "Deploy your first SysManage server instance"
        },
        "agents": {
          "title": "Agent Setup",
          "description": "Install and approve your first agents"
        },
        "management": {
          "title": "Basic Management",
          "description": "Learn essential management tasks"
        }
      }
    },
    "cards": {
      "quick_start": {
        "title": "🚀 Quick Start",
        "description": "Get SysManage up and running quickly with our streamlined installation guide. Perfect for evaluation and small deployments.",
        "features": {
          "requirements": "System requirements and prerequisites",
          "docker": "Installation with Docker Compose",
          "config": "Initial configuration and setup",
          "login": "First login and basic navigation"
        },
        "link": "Quick Start Guide →"
      },
      "webui": {
        "title": "🌐 Web Interface Overview",
        "description": "Comprehensive tour of the SysManage web interface and its key features for monitoring and management.",
        "features": {
          "dashboard": "Dashboard overview and navigation",
          "hosts": "Host management interface",
          "packages": "Package management features",
          "monitoring": "Monitoring and alerts"
        },
        "link": "Web Interface Guide →"
      }
    },
    "prerequisites": {
      "title": "Before You Begin",
      "system": {
        "title": "System Requirements",
        "server": {
          "title": "Server Requirements"
        },
        "platforms": {
          "title": "Supported Platforms"
        }
      },
      "knowledge": {
        "title": "Required Knowledge"
      },
      "needed": {
        "title": "What You'll Need"
      }
    },
    "use_cases": {
      "title": "Common Use Cases",
      "small": {
        "title": "🏢 Small Business"
      },
      "medium": {
        "title": "🏭 Medium Enterprise"
      },
      "large": {
        "title": "🌐 Large Organization"
      }
    },
    "learning_path": {
      "title": "Recommended Learning Path"
    },
    "help": {
      "title": "Getting Help",
      "docs": {
        "title": "📖 Documentation",
        "description": "Comprehensive guides covering all aspects of SysManage"
      },
      "community": {
        "title": "💬 Community",
        "description": "Connect with other SysManage users and contributors"
      },
      "troubleshooting": {
        "title": "🔧 Troubleshooting",
        "description": "Common issues and their solutions"
      }
    },
    "navigation": {
      "title": "Quick Navigation",
      "docs_home": "← Documentation Home",
      "quick_start": "Quick Start →"
    }
  },
  "secrets_management": {
    "title": "Secrets Management with OpenBAO - SysManage",
    "description": "Enterprise-grade secrets management using OpenBAO vault for secure certificate deployment, SSH keys, and credentials management in SysManage.",
    "breadcrumb": "Secrets Management",
    "header": {
      "title": "🔒 Enterprise Secrets Management with OpenBAO",
      "subtitle": "Revolutionary secrets management powered by OpenBAO vault - setting the gold standard for infrastructure security."
    },
    "overview": {
      "title": "🏆 Second-to-None Security Architecture",
      "description": "SysManage integrates with <strong>OpenBAO</strong>, the enterprise-grade secrets management platform, to deliver unparalleled security for your infrastructure. This isn't just another secrets manager - it's a complete security transformation that elevates your system management to enterprise standards.",
      "badge_title": "🛡️ Military-Grade Security",
      "badge_description": "OpenBAO provides bank-level encryption, zero-trust architecture, and enterprise audit trails that make SysManage the most secure system management platform available."
    },
    "openbao": {
      "title": "🚀 What is OpenBAO?",
      "description": "OpenBAO is a cutting-edge, open-source secrets management platform that provides enterprise-grade security for sensitive data. Born from the HashiCorp Vault codebase, OpenBAO represents the future of secrets management with enhanced security, better performance, and true open-source governance.",
      "benefits_title": "🎯 Why OpenBAO Makes SysManage Exceptional",
      "benefit1_title": "🔐 Zero-Trust Security",
      "benefit1_description": "Every secret is encrypted at rest and in transit, with granular access controls and comprehensive audit logging.",
      "benefit2_title": "🏃‍♂️ High Performance",
      "benefit2_description": "Lightning-fast secret retrieval and storage with minimal latency impact on your operations.",
      "benefit3_title": "🌐 Enterprise Scale",
      "benefit3_description": "Scales from single installations to massive multi-region deployments seamlessly.",
      "benefit4_title": "🔄 Dynamic Secrets",
      "benefit4_description": "Generate short-lived, rotatable secrets that minimize exposure windows."
    },
    "features": {
      "title": "⭐ Revolutionary Features in SysManage",
      "certificates_title": "📜 Automated Certificate Deployment",
      "certificates_description": "Deploy SSL/TLS certificates across your entire infrastructure with zero downtime. OpenBAO securely stores certificates and private keys, while SysManage handles automated deployment to target hosts.",
      "certificates_feature1": "Secure certificate storage with encryption at rest",
      "certificates_feature2": "Automated deployment to multiple hosts simultaneously",
      "certificates_feature3": "Real-time deployment monitoring and status tracking",
      "certificates_feature4": "Comprehensive audit trail for all certificate operations",
      "ssh_title": "🔑 SSH Key Management",
      "ssh_description": "Revolutionize SSH access management with centralized key storage, automated deployment, and rotation capabilities that eliminate manual key distribution.",
      "ssh_feature1": "Centralized SSH key storage and management",
      "ssh_feature2": "Automated key deployment to authorized_keys files",
      "ssh_feature3": "Support for ed25519, RSA, and ECDSA key types",
      "ssh_feature4": "Key rotation and lifecycle management",
      "credentials_title": "🛡️ Credentials Vault",
      "credentials_description": "Store and manage sensitive credentials with military-grade encryption, making manual credential management a thing of the past.",
      "credentials_feature1": "AES-256 encryption for all stored secrets",
      "credentials_feature2": "Granular access controls and permissions",
      "credentials_feature3": "Secret versioning and rollback capabilities",
      "credentials_feature4": "Integration with external authentication systems"
    },
    "architecture": {
      "title": "🏗️ Security Architecture",
      "description": "The integration between SysManage and OpenBAO creates a fortress-like security architecture that protects your most sensitive data.",
      "diagram_title": "🔄 Secure Data Flow",
      "step1_title": "Secure Storage",
      "step1_description": "Secrets are encrypted and stored in OpenBAO vault with metadata tracking",
      "step2_title": "Authentication",
      "step2_description": "SysManage authenticates with OpenBAO using secure token-based auth",
      "step3_title": "Secure Retrieval",
      "step3_description": "Secrets are retrieved on-demand with full audit logging",
      "step4_title": "Encrypted Deployment",
      "step4_description": "Secrets transmitted to agents via encrypted WebSocket channels",
      "principles_title": "🛡️ Security Principles",
      "principle1": "<strong>Zero Trust</strong>: Every access request is authenticated and authorized",
      "principle2": "<strong>Encryption Everywhere</strong>: Data encrypted at rest, in transit, and in memory",
      "principle3": "<strong>Minimal Exposure</strong>: Secrets are only decrypted when needed",
      "principle4": "<strong>Comprehensive Auditing</strong>: Every operation is logged and traceable",
      "principle5": "<strong>Principle of Least Privilege</strong>: Access granted only as needed"
    },
    "deployment": {
      "title": "🚀 Deployment Workflow",
      "certificate_title": "📜 Certificate Deployment Process",
      "cert_step1_title": "Upload & Store",
      "cert_step1_description": "Upload certificates through SysManage web interface, automatically stored in OpenBAO vault",
      "cert_step2_title": "Select Targets",
      "cert_step2_description": "Choose target hosts and deployment paths through intuitive web interface",
      "cert_step3_title": "Secure Transfer",
      "cert_step3_description": "Certificates securely transmitted via encrypted WebSocket connections to agents",
      "cert_step4_title": "Deployment & Verification",
      "cert_step4_description": "Agents deploy certificates with proper permissions and verify successful installation",
      "ssh_title": "🔑 SSH Key Deployment Process",
      "ssh_step1_title": "Key Management",
      "ssh_step1_description": "Store SSH public keys in OpenBAO with metadata and access controls",
      "ssh_step2_title": "User Assignment",
      "ssh_step2_description": "Assign keys to specific users and hosts with granular permissions",
      "ssh_step3_title": "Automated Deployment",
      "ssh_step3_description": "Keys automatically added to authorized_keys files with proper formatting",
      "ssh_step4_title": "Access Verification",
      "ssh_step4_description": "Verify SSH access works and maintain audit trail of all key operations"
    },
    "benefits": {
      "title": "🏆 Competitive Advantages",
      "description": "SysManage's OpenBAO integration delivers security capabilities that set it apart from every other system management platform:",
      "enterprise_title": "🏢 Enterprise-Ready from Day One",
      "enterprise_description": "While other platforms treat security as an afterthought, SysManage builds on OpenBAO's enterprise-proven foundation from the ground up.",
      "compliance_title": "✅ Compliance-Ready",
      "compliance_description": "Meets SOC 2, GDPR, HIPAA, and other regulatory requirements out of the box with comprehensive audit trails and encryption.",
      "automation_title": "🤖 Zero-Touch Automation",
      "automation_description": "Complete automation of certificate and SSH key deployment eliminates human error and reduces operational overhead.",
      "integration_title": "🔗 Seamless Integration",
      "integration_description": "Native OpenBAO integration means no complex configurations or third-party dependencies - it just works.",
      "monitoring_title": "📊 Real-Time Visibility",
      "monitoring_description": "Monitor secret deployments in real-time with comprehensive logging and status tracking across all your infrastructure.",
      "scalability_title": "📈 Infinite Scale",
      "scalability_description": "From single servers to massive multi-cloud deployments, the architecture scales without compromising security or performance."
    },
    "getting_started": {
      "title": "🚀 Getting Started",
      "description": "Ready to experience enterprise-grade secrets management? The integrated OpenBAO setup makes getting started effortless:",
      "step1_title": "1. Automated Setup",
      "step1_description": "The <code>sysmanage_secure_installation</code> script automatically configures OpenBAO in production mode with secure defaults.",
      "step2_title": "2. Upload Secrets",
      "step2_description": "Use the web interface to securely upload certificates, SSH keys, and other sensitive data.",
      "step3_title": "3. Deploy with Confidence",
      "step3_description": "Select targets and deploy with real-time monitoring and comprehensive audit trails.",
      "next_title": "📚 Next Steps",
      "link1": "Complete Getting Started Guide",
      "link2": "Security Best Practices",
      "link3": "Administration Guide",
      "link4": "API Documentation"
    },
    "card": {
      "title": "🔒 Enterprise Secrets Management with OpenBAO",
      "description": "Revolutionary secrets management powered by OpenBAO vault - the crown jewel of SysManage's security architecture.",
      "feature1": "Enterprise-grade OpenBAO vault integration",
      "feature2": "Automated SSL/TLS certificate deployment",
      "feature3": "Centralized SSH key management and deployment",
      "feature4": "Zero-trust architecture with comprehensive audit trails",
      "feature5": "Military-grade encryption for all sensitive data",
      "link": "Secrets Management →"
    }
  },
  "secure_installation": {
    "title": "Secure Installation Guide - SysManage",
    "description": "Complete guide to the sysmanage_secure_installation script for automated OpenBAO setup and secure system initialization.",
    "breadcrumb": "Secure Installation",
    "header": {
      "title": "🔐 SysManage Secure Installation",
      "subtitle": "Automated production-ready setup with integrated OpenBAO vault initialization and enterprise security defaults."
    },
    "overview": {
      "title": "🏆 Production-Ready Security from Day One",
      "description": "The <code>sysmanage_secure_installation</code> script represents a quantum leap in system management deployment. Inspired by MySQL's legendary secure installation process, this script transforms a basic SysManage installation into an enterprise-grade, production-ready security fortress.",
      "badge_title": "🚀 Zero-Configuration Excellence",
      "badge_description": "What used to take hours of manual configuration now happens in minutes with bulletproof automation that never makes mistakes."
    },
    "what_it_does": {
      "title": "⚡ What the Script Accomplishes",
      "description": "This revolutionary script automates the complete transformation of your SysManage installation into an enterprise-grade security platform:"
    },
    "accomplishments": {
      "openbao_title": "🏗️ OpenBAO Vault Initialization",
      "openbao_feature1": "Automatic OpenBAO server configuration and startup",
      "openbao_feature2": "Production-mode vault initialization with secure defaults",
      "openbao_feature3": "Automated vault unsealing and secrets engine setup",
      "openbao_feature4": "Secure credential generation and storage",
      "database_title": "🗄️ Database Security Hardening",
      "database_feature1": "Complete Alembic migration execution",
      "database_feature2": "UUID-based primary keys for enhanced security",
      "database_feature3": "Secure database schema initialization",
      "database_feature4": "Database connection validation and optimization",
      "admin_title": "👤 Administrative User Setup",
      "admin_feature1": "Secure admin user creation with Argon2 password hashing",
      "admin_feature2": "UUID-based user identification",
      "admin_feature3": "Comprehensive password policy enforcement",
      "admin_feature4": "Role-based access control initialization",
      "security_title": "🔒 Security Configuration",
      "security_feature1": "Cryptographically secure JWT secret generation",
      "security_feature2": "Production security defaults activation",
      "security_feature3": "SSL/TLS configuration optimization",
      "security_feature4": "Security warning system initialization"
    },
    "cross_platform": {
      "title": "🌐 Cross-Platform Excellence",
      "description": "The secure installation script demonstrates SysManage's commitment to universal compatibility with intelligent platform detection and privilege management:",
      "supported_title": "✅ Supported Platforms",
      "privileges_title": "🔐 Intelligent Privilege Management"
    },
    "platforms": {
      "linux_title": "🐧 Linux",
      "linux_description": "Full support for all major distributions with automatic sudo detection",
      "macos_title": "🍎 macOS",
      "macos_description": "Native macOS support with Homebrew integration",
      "freebsd_title": "😈 FreeBSD",
      "freebsd_description": "BSD-native with doas and sudo support",
      "openbsd_title": "🐡 OpenBSD",
      "openbsd_description": "OpenBSD security-first approach with doas integration",
      "windows_title": "🪟 Windows",
      "windows_description": "PowerShell and MSYS2 support with Administrator privilege detection"
    },
    "privileges": {
      "feature1": "<strong>Automatic Detection</strong>: Detects current privilege level across all platforms",
      "feature2": "<strong>Smart Elevation</strong>: Uses appropriate elevation method (sudo, doas, or Administrator)",
      "feature3": "<strong>Virtual Environment</strong>: Maintains proper Python virtual environment context",
      "feature4": "<strong>Safety Checks</strong>: Validates environment before making system changes"
    },
    "usage": {
      "title": "🚀 Usage Guide",
      "prerequisites_title": "📋 Prerequisites",
      "prereq1": "SysManage installation with virtual environment set up (<code>make install-dev</code>)",
      "prereq2": "Administrative/root privileges on the system",
      "prereq3": "PostgreSQL database running and accessible",
      "prereq4": "OpenBAO binary available (automatically installed with <code>make install-dev</code>)",
      "running_title": "⚡ Running the Script",
      "basic_title": "Basic Usage:",
      "advanced_title": "Advanced Options:",
      "flow_title": "📊 Installation Flow"
    },
    "flow": {
      "step1_title": "Environment Validation",
      "step1_description": "Validates virtual environment, dependencies, and system requirements",
      "step2_title": "Database Migration",
      "step2_description": "Executes Alembic migrations to set up secure database schema",
      "step3_title": "Admin User Creation",
      "step3_description": "Creates administrative user with secure password hashing",
      "step4_title": "Security Configuration",
      "step4_description": "Generates JWT secrets and applies security hardening",
      "step5_title": "OpenBAO Initialization",
      "step5_description": "Configures and initializes OpenBAO vault in production mode",
      "success_title": "Production Ready!",
      "success_description": "Enterprise-grade SysManage installation ready for production use"
    },
    "security_features": {
      "title": "🛡️ Advanced Security Features"
    },
    "security": {
      "argon2_title": "🔐 Argon2 Password Hashing",
      "argon2_description": "Uses Argon2id, the winner of the Password Hashing Competition, providing military-grade protection against rainbow table and GPU-based attacks.",
      "argon2_feature1": "Memory-hard algorithm resistant to specialized hardware attacks",
      "argon2_feature2": "Configurable time and memory parameters for optimal security",
      "argon2_feature3": "Salt-based protection against rainbow table attacks",
      "uuid_title": "🆔 UUID-Based Security",
      "uuid_description": "All primary keys use cryptographically secure UUIDs, eliminating enumeration attacks and providing enhanced privacy.",
      "uuid_feature1": "Version 4 UUIDs with cryptographic randomness",
      "uuid_feature2": "Prevents user enumeration and predictable resource URLs",
      "uuid_feature3": "Enhanced privacy and GDPR compliance",
      "jwt_title": "🎫 Cryptographic JWT Secrets",
      "jwt_description": "Generates cryptographically secure JWT secrets using Python's secrets module for unbreakable token security.",
      "jwt_feature1": "256-bit entropy from OS-level randomness",
      "jwt_feature2": "Automatic secret rotation capabilities",
      "jwt_feature3": "Secure token validation and expiration",
      "openbao_title": "🏦 OpenBAO Vault Integration",
      "openbao_description": "Seamless OpenBAO integration provides enterprise-grade secrets management from the moment of installation.",
      "openbao_feature1": "Automatic vault initialization and unsealing",
      "openbao_feature2": "Production-mode configuration with secure defaults",
      "openbao_feature3": "Key-value secrets engine setup and configuration"
    },
    "troubleshooting": {
      "title": "🔧 Troubleshooting",
      "privileges_title": "❌ Privilege Issues",
      "privileges_problem": "<strong>Problem:</strong> Script fails with permission denied errors",
      "privileges_solution_title": "Solution:",
      "privileges_solution1": "Ensure you have administrative privileges on your system",
      "privileges_solution2": "On Linux/macOS: Use <code>sudo</code> or ensure your user is in sudoers",
      "privileges_solution3": "On FreeBSD/OpenBSD: Configure <code>doas</code> or use <code>sudo</code>",
      "privileges_solution4": "On Windows: Run terminal as Administrator",
      "venv_title": "🐍 Virtual Environment Issues",
      "venv_problem": "<strong>Problem:</strong> \"Virtual environment not found\" error",
      "venv_solution_title": "Solution:",
      "database_title": "🗄️ Database Connection Issues",
      "database_problem": "<strong>Problem:</strong> Database connection failures during migration",
      "database_solution_title": "Solution:",
      "database_solution1": "Verify PostgreSQL is running: <code>systemctl status postgresql</code>",
      "database_solution2": "Check database credentials in configuration file",
      "database_solution3": "Ensure database user has CREATE privileges",
      "database_solution4": "Test connection manually: <code>psql -h host -U user -d database</code>",
      "openbao_title": "🏦 OpenBAO Installation Issues",
      "openbao_problem": "<strong>Problem:</strong> OpenBAO binary not found or initialization fails",
      "openbao_solution_title": "Solution:",
      "openbao_solution1": "Install OpenBAO: <code>make install-dev</code> (includes OpenBAO)",
      "openbao_solution2": "Manually install OpenBAO from official releases",
      "openbao_solution3": "Check firewall settings for localhost connections",
      "openbao_solution4": "Use <code>--skip-vault</code> flag to skip OpenBAO setup temporarily"
    },
    "post_installation": {
      "title": "🎉 Post-Installation Steps",
      "description": "After successful completion, your SysManage installation is production-ready with enterprise-grade security. Here's what to do next:",
      "checklist_title": "✅ Post-Installation Checklist",
      "check1": "<strong>Secure Credentials</strong>: Store the generated <code>.vault_credentials</code> file in a secure location",
      "check2": "<strong>Start Services</strong>: Use <code>make start</code> to launch all services",
      "check3": "<strong>Access Web Interface</strong>: Navigate to <code>https://your-server:8443</code>",
      "check4": "<strong>Login</strong>: Use the admin credentials you created during installation",
      "check5": "<strong>Deploy Agents</strong>: Install and approve SysManage agents on your infrastructure",
      "check6": "<strong>Upload Secrets</strong>: Begin using the secrets management features",
      "next_title": "🚀 Next Steps",
      "link1": "Complete Getting Started Guide",
      "link2": "Explore Secrets Management Features",
      "link3": "Install and Configure Agents",
      "link4": "Review Security Best Practices"
    },
    "card": {
      "title": "🔐 Secure Installation",
      "description": "Revolutionary automated setup script that transforms your SysManage installation into an enterprise-grade security fortress with OpenBAO integration.",
      "feature1": "Automated OpenBAO vault initialization in production mode",
      "feature2": "Cross-platform privilege management and elevation",
      "feature3": "Cryptographically secure admin user creation",
      "feature4": "Enterprise security defaults and hardening",
      "feature5": "Database migration and schema initialization",
      "link": "Secure Installation Guide →"
    }
  },
  "navigation": {
    "title": "Quick Navigation",
    "security_overview": "← Security Overview",
    "best_practices": "Security Best Practices →",
    "server_installation": "← Server Installation",
    "server_configuration": "Server Configuration →"
  },
  "security": {
    "title": "Security Documentation",
    "subtitle": "Comprehensive security documentation covering authentication, authorization, encryption, and best practices.",
    "authentication": {
      "title": "Authentication & Authorization",
      "subtitle": "Comprehensive guide to SysManage's JWT-based authentication system, role-based access control, multi-factor authentication, and session management.",
      "overview": "Authentication Overview",
      "auth_architecture": "Authentication Architecture",
      "jwt_authentication": "JWT Authentication",
      "jwt_implementation": "JWT Implementation",
      "jwt_token_structure": "JWT Token Structure",
      "token_generation_process": "Token Generation Process",
      "jwt_configuration": "JWT Configuration",
      "token_rotation_security": "Token Rotation & Security",
      "automatic_rotation": "Automatic Rotation",
      "token_blacklisting": "Token Blacklisting",
      "token_validation_flow": "Token Validation Flow",
      "rbac_system": "Role-Based Access Control (RBAC)",
      "rbac_architecture": "RBAC Architecture",
      "rbac_data_model": "RBAC Data Model",
      "default_roles": "Default Roles",
      "admin": "Admin",
      "operator": "Operator",
      "viewer": "Viewer",
      "auditor": "Auditor",
      "permission_system": "Permission System",
      "permission_examples": "Permission Examples",
      "rbac_implementation": "RBAC Implementation",
      "multi_factor_auth": "Multi-Factor Authentication (MFA)",
      "mfa_implementation": "MFA Implementation",
      "supported_mfa_methods": "Supported MFA Methods",
      "totp": "TOTP (Time-based OTP)",
      "email_otp": "Email OTP",
      "recovery_codes": "Recovery Codes",
      "mfa_enrollment_process": "MFA Enrollment Process",
      "mfa_configuration": "MFA Configuration",
      "session_management": "Session Management",
      "session_architecture": "Session Architecture",
      "session_features": "Session Features",
      "token_based_sessions": "Token-Based Sessions",
      "session_security": "Session Security",
      "session_monitoring": "Session Monitoring",
      "session_configuration": "Session Configuration",
      "password_policies": "Password Policies",
      "password_requirements": "Password Requirements",
      "default_password_policy": "Default Password Policy",
      "password_policy_configuration": "Password Policy Configuration",
      "security_monitoring": "Authentication Security Monitoring",
      "security_events": "Security Events",
      "monitored_events": "Monitored Events",
      "authentication_events": "Authentication Events",
      "suspicious_activities": "Suspicious Activities",
      "administrative_actions": "Administrative Actions",
      "alert_configuration": "Alert Configuration",
      "integration_examples": "Integration Examples",
      "external_auth_providers": "External Authentication Providers",
      "ldap_ad_integration": "LDAP/Active Directory Integration",
      "saml_integration": "SAML 2.0 Integration",
      "troubleshooting": "Troubleshooting Authentication",
      "common_issues": "Common Issues",
      "token_expired_errors": "Token Expired Errors",
      "mfa_setup_problems": "MFA Setup Problems",
      "rbac_permission_errors": "RBAC Permission Errors",
      "external_auth_integration": "External Auth Integration",
      "diagnostic_commands": "Diagnostic Commands",
      "next_steps": "Next Steps"
    }
  },
  "footer": {
    "description": "Modern system management platform for comprehensive infrastructure monitoring and automation.",
    "documentation": "Documentation",
    "server_docs": "Server Docs",
    "agent_docs": "Agent Docs",
    "api_reference": "API Reference",
    "security": "Security",
    "community": "Community",
    "github_repo": "GitHub Repository",
    "server_github_repo": "Server GitHub Repository",
    "agent_github_repo": "Agent GitHub Repository",
    "issue_tracker": "Issue Tracker",
    "discussions": "Discussions",
    "license": "License",
    "licensed_under": "Licensed under AGPLv3",
    "view_license": "View License",
    "copyright": "© 2024 SysManage. All rights reserved."
  },
  "installation": {
    "title": "Installation Guide",
    "system_requirements": "System Requirements",
    "prerequisites": "Prerequisites",
    "installation_steps": "Installation Steps",
    "troubleshooting": "Troubleshooting"
  },
  "configuration": {
    "title": "Configuration Guide",
    "basic_config": "Basic Configuration",
    "security_config": "Security Configuration",
    "advanced_features": "Advanced Features"
  },
  "security_page": {
    "title": "Security Documentation",
    "overview": "Security Overview",
    "features": "Security Features",
    "vulnerability_reporting": "Vulnerability Reporting"
  },
  "platforms": {
    "opensuse": {
      "title": "openSUSE Leap/Tumbleweed",
      "package_notes": "Package Manager Notes",
      "leap_note": "Uses stable packages, may need manual Rust installation",
      "tumbleweed_note": "Rolling release, Rust available via zypper",
      "python_versions": "Leap ships with Python 3.9+, Tumbleweed with latest stable"
    },
    "sles": {
      "title": "SUSE Linux Enterprise Server (SLES)",
      "enterprise_considerations": "Enterprise Considerations",
      "sles12_note": "May require Software Collections (SCL) for newer Python",
      "sles15_note": "Python 3.6+ included, but 3.9+ recommended",
      "firewall_note": "SuSEfirewall2 or firewalld may block agent ports",
      "selinux_note": "May require policy adjustments if enabled",
      "subscription_note": "Some packages require active SLES subscription",
      "service_notes": "SUSE Enterprise Notes",
      "firewall_config": "Open required ports via YaST or firewall-cmd",
      "apparmor_note": "SUSE uses AppArmor instead of SELinux by default",
      "logging_note": "Logs available via journalctl or /var/log/messages"
    }
  },
  "server_docs": {
    "title": "Server Documentation - SysManage",
    "description": "Complete documentation for SysManage server installation, configuration, and management.",
    "section_title": "Server",
    "header": {
      "title": "Server Documentation",
      "subtitle": "Complete guide for installing, configuring, and managing the SysManage server."
    },
    "overview": {
      "title": "Overview",
      "description": "The SysManage server is a modern web application built with FastAPI (Python) backend and React (TypeScript) frontend. It provides a centralized platform for managing multiple systems through lightweight agents.",
      "components_title": "Server Components",
      "backend_api": "<strong>Backend API</strong> - FastAPI with async support, JWT authentication, and WebSocket communication",
      "frontend_ui": "<strong>Frontend UI</strong> - React with TypeScript, Material-UI components, and real-time updates",
      "database": "<strong>Database</strong> - PostgreSQL with Alembic migrations and comprehensive data models",
      "websocket_engine": "<strong>WebSocket Engine</strong> - Real-time bidirectional communication with agents",
      "security_layer": "<strong>Security Layer</strong> - Enterprise-grade security with mTLS, RBAC, and comprehensive scanning"
    },
    "installation": {
      "title": "🚀 Installation",
      "description": "Step-by-step installation guide for setting up the SysManage server on your infrastructure.",
      "requirements": "System requirements and prerequisites",
      "methods": "Docker and traditional installation methods",
      "database": "Database setup and configuration",
      "ssl": "SSL certificate configuration",
      "link": "Installation Guide →"
    },
    "configuration": {
      "title": "⚙️ Configuration",
      "description": "Comprehensive configuration options for customizing your SysManage deployment.",
      "file_structure": "Configuration file structure",
      "database_settings": "Database connection settings",
      "security_options": "Security and authentication options",
      "websocket_api": "WebSocket and API configuration",
      "link": "Configuration Guide →"
    },
    "deployment": {
      "title": "🏗️ Deployment",
      "description": "Production deployment strategies and best practices for scalable infrastructure.",
      "checklist": "Production deployment checklist",
      "scaling": "Load balancing and scaling",
      "monitoring": "Monitoring and logging setup",
      "backup": "Backup and disaster recovery",
      "link": "Deployment Guide →"
    },
    "features": {
      "title": "✨ Features",
      "description": "Detailed overview of all server features and capabilities.",
      "host_management": "Host and agent management",
      "package_management": "Package management across platforms",
      "monitoring": "Real-time monitoring and alerts",
      "user_management": "User management and RBAC",
      "link": "Features Overview →"
    },
    "reports": {
      "title": "📋 Reports & PDF Generation",
      "description": "Comprehensive reporting system with real-time HTML viewing and professional PDF generation.",
      "inventory": "Host inventory and system reports",
      "security": "User management and security reports",
      "generation": "Real-time HTML and PDF generation",
      "i18n": "Internationalized report content",
      "link": "Reports Documentation →"
    },
    "testing": {
      "title": "🧪 Testing",
      "description": "Comprehensive testing strategy including unit tests, integration tests, and E2E testing with Playwright.",
      "unit_integration": "Unit and integration testing",
      "e2e": "End-to-end testing with Playwright",
      "coverage": "Test coverage and reporting",
      "cicd": "CI/CD testing pipeline",
      "link": "Testing Documentation →"
    },
    "troubleshooting": {
      "title": "🔧 Troubleshooting",
      "description": "Common issues, debugging techniques, and solutions for server problems.",
      "errors": "Common error messages and solutions",
      "debugging": "Log analysis and debugging",
      "performance": "Performance optimization",
      "maintenance": "Database maintenance",
      "link": "Troubleshooting Guide →"
    },
    "security": {
      "title": "🔐 Security",
      "description": "Security features, configuration, and best practices for secure deployments.",
      "auth": "Authentication and authorization",
      "mtls": "Mutual TLS (mTLS) configuration",
      "scanning": "Security scanning and monitoring",
      "hardening": "Hardening guidelines",
      "link": "Security Documentation →"
    },
    "navigation": {
      "title": "Quick Navigation",
      "agent": "← Agent Documentation",
      "api": "API Reference →"
    }
  },
  "agent_docs": {
    "title": "Agent Documentation - SysManage",
    "description": "Complete documentation for SysManage agent installation, configuration, and cross-platform management.",
    "section_title": "Agent",
    "header": {
      "title": "Agent Documentation",
      "subtitle": "Complete guide for installing, configuring, and managing SysManage agents across all supported platforms."
    },
    "overview": {
      "title": "Overview",
      "description": "The SysManage agent is a lightweight, secure, cross-platform Python application that connects to the SysManage server via WebSocket for real-time system monitoring and management.",
      "platforms_title": "Supported Platforms",
      "platform_linux": "🐧 Linux (Ubuntu, Debian, CentOS, RHEL, Fedora)",
      "platform_windows": "🪟 Windows (10, 11, Server 2019/2022)",
      "platform_macos": "🍎 macOS (Intel and Apple Silicon)",
      "platform_freebsd": "🔒 FreeBSD",
      "platform_openbsd": "🛡️ OpenBSD",
      "features_title": "Key Features",
      "auto_discovery": "<strong>Auto-Discovery</strong> - Automatic server detection on the network",
      "realtime_communication": "<strong>Real-time Communication</strong> - WebSocket-based instant responsiveness",
      "secure_design": "<strong>Secure by Design</strong> - mTLS, certificate-based authentication, no inbound ports",
      "package_management": "<strong>Cross-platform Package Management</strong> - Native support for all major package managers",
      "multilingual": "<strong>Multi-language Support</strong> - Native support for 14 languages",
      "lightweight": "<strong>Lightweight</strong> - Minimal resource footprint and dependencies"
    },
    "installation": {
      "title": "🚀 Installation",
      "description": "Platform-specific installation instructions for all supported operating systems.",
      "prerequisites": "Prerequisites and system requirements",
      "methods": "Installation methods (source, packages)",
      "venv": "Virtual environment setup",
      "service": "Service configuration",
      "link": "Installation Guide →"
    },
    "configuration": {
      "title": "⚙️ Configuration",
      "description": "Agent configuration options including auto-discovery and manual setup.",
      "auto_discovery": "Auto-discovery setup (recommended)",
      "manual": "Manual server configuration",
      "security": "Security and authentication options",
      "logging": "Logging and internationalization",
      "link": "Configuration Guide →"
    },
    "privileged": {
      "title": "🔐 Privileged Execution",
      "description": "Running agents with elevated privileges for package management and system administration.",
      "cross_platform": "Cross-platform privileged execution",
      "security": "Security considerations and best practices",
      "service_account": "Service account configuration",
      "scripts": "Automated privilege scripts",
      "link": "Privileged Execution →"
    },
    "cross_platform": {
      "title": "🌍 Cross-Platform Support",
      "description": "Platform-specific features, package managers, and system integration details.",
      "linux": "Linux distributions and package managers",
      "windows": "Windows service integration",
      "macos": "macOS launchd configuration",
      "bsd": "BSD-specific considerations",
      "link": "Cross-Platform Guide →"
    },
    "troubleshooting": {
      "title": "🔧 Troubleshooting",
      "description": "Common issues, debugging techniques, and solutions for agent problems.",
      "connection": "Connection and network issues",
      "permissions": "Permission and privilege problems",
      "platform": "Platform-specific troubleshooting",
      "debugging": "Log analysis and debugging",
      "link": "Troubleshooting Guide →"
    },
    "security": {
      "title": "🔒 Security",
      "description": "Agent security features, mTLS configuration, and security best practices.",
      "mtls": "Mutual TLS (mTLS) authentication",
      "certificates": "Certificate management",
      "network": "Network security and communication",
      "scanning": "Security scanning and validation",
      "link": "Security Documentation →"
    },
    "architecture": {
      "title": "Agent Architecture",
      "description": "The agent operates as a persistent service with the following workflow:",
      "auto_discovery": "<strong>Auto-Discovery</strong> - Discovers SysManage servers on the network (if no configuration exists)",
      "registration": "<strong>Registration</strong> - Connects to server via secure WebSocket with authentication tokens",
      "approval": "<strong>Approval Process</strong> - Registers with system information and awaits administrator approval",
      "mtls_setup": "<strong>mTLS Setup</strong> - Retrieves client certificates after approval for enhanced security",
      "monitoring": "<strong>Monitoring</strong> - Monitors system health and sends periodic heartbeat messages",
      "execution": "<strong>Command Execution</strong> - Listens for and executes commands with validation and security controls",
      "reporting": "<strong>Reporting</strong> - Reports command results and system status with message integrity"
    },
    "navigation": {
      "title": "Quick Navigation",
      "server": "← Server Documentation",
      "api": "API Reference →"
    }
  },
  "server_installation": {
    "title": "Server Installation Guide - SysManage",
    "description": "Complete installation guide for SysManage server including prerequisites, database setup, and configuration.",
    "breadcrumb_installation": "Installation",
    "header": {
      "title": "Server Installation Guide",
      "subtitle": "Complete step-by-step installation guide for setting up the SysManage server on your infrastructure."
    },
    "requirements": {
      "title": "System Requirements",
      "required": "Required",
      "supported": "Supported",
      "python": {
        "title": "🐍 Python",
        "version": "3.11 or 3.12",
        "note": "Note: Python 3.13 is NOT yet supported due to package compatibility issues"
      },
      "nodejs": {
        "title": "🟢 Node.js",
        "version": "20.x or higher",
        "description": "For building the React frontend"
      },
      "postgresql": {
        "title": "🐘 PostgreSQL",
        "version": "14 or higher",
        "description": "Primary database for all application data"
      },
      "os": {
        "title": "💻 Operating System",
        "platforms": "Linux, macOS, Windows, FreeBSD, OpenBSD, NetBSD",
        "description": "Cross-platform deployment"
      }
    },
    "prerequisites": {
      "title": "Platform-Specific Prerequisites",
      "ubuntu_debian": "Ubuntu/Debian",
      "centos_rhel": "CentOS/RHEL",
      "macos": {
        "title": "macOS",
        "tab_title": "macOS"
      },
      "windows": {
        "title": "Windows",
        "tab_title": "Windows"
      },
      "freebsd": {
        "title": "FreeBSD",
        "tab_title": "FreeBSD"
      },
      "openbsd": {
        "title": "OpenBSD",
        "tab_title": "OpenBSD"
      },
      "ubuntu": {
        "title": "Ubuntu 22.04 - 24.10 (Recommended)"
      },
      "ubuntu25": {
        "title": "Ubuntu 25.04+ (Python 3.12 from Source)",
        "tab_title": "Ubuntu 25.04+",
        "note": "Ubuntu 25.04+ only ships with Python 3.13, which is not yet compatible. You must build Python 3.12 from source:"
      },
      "centos": {
        "title": "CentOS/RHEL/Fedora",
        "tab_title": "CentOS/RHEL"
      },
      "netbsd": {
        "title": "NetBSD Complete Setup Guide",
        "tab_title": "NetBSD"
      },
      "opensuse": {
        "title": "openSUSE Leap/Tumbleweed",
        "tab_title": "openSUSE",
        "note_title": "📦 Package Manager Notes",
        "note_leap": "openSUSE Leap: Stable packages, Python 3.11 typically available",
        "note_tumbleweed": "openSUSE Tumbleweed: Rolling release with latest packages",
        "note_nodejs": "Node.js versions: May need to specify version (nodejs20) explicitly",
        "note_postgresql": "PostgreSQL: Specify version (postgresql14) for compatibility"
      },
      "sles": {
        "title": "SUSE Linux Enterprise Server (SLES)",
        "tab_title": "SLES",
        "note_title": "🏢 Enterprise Considerations",
        "note_sles12": "SLES 12: May require Software Collections (SCL) for newer Python",
        "note_sles15": "SLES 15: Python 3.6+ included, but 3.11+ recommended",
        "note_modules": "Modules: Some packages require enabling additional modules via SUSEConnect",
        "note_firewall": "Firewall: May use SuSEfirewall2 (older) or firewalld (newer)",
        "note_selinux": "SELinux: May require policy adjustments if enabled",
        "note_subscription": "Subscription: Active SLES subscription required for full package access"
      }
    },
    "installation_steps": {
      "title": "Installation Steps",
      "step1": {
        "title": "Step 1: Clone and Setup"
      },
      "step2": {
        "title": "Step 2: Install Backend Dependencies"
      },
      "step3": {
        "title": "Step 3: Database Setup",
        "description": "Create PostgreSQL database and user:",
        "linux_macos_freebsd": "Linux/macOS/FreeBSD",
        "openbsd": "OpenBSD",
        "netbsd": "NetBSD",
        "windows": "Windows",
        "security_notes": {
          "title": "⚠️ Security Notes",
          "dev_password": "Development password <code>abc123</code> matches <code>sysmanage-dev.yaml</code>",
          "never_production": "NEVER use this password in production",
          "change_password": "Change password in both PostgreSQL AND your configuration file"
        }
      },
      "step4": {
        "title": "Step 4: Test Database Connection"
      },
      "step5": {
        "title": "Step 5: Install Frontend Dependencies"
      },
      "step6": {
        "title": "Step 6: Configuration",
        "description": "Create configuration file at:",
        "config_generator": {
          "title": "💡 Configuration Generator Available",
          "description": "Use the interactive",
          "link": "Configuration Builder Tool"
        },
        "linux_macos_bsd": "Linux/macOS/BSD:",
        "windows_path": "Windows:",
        "security_steps": {
          "title": "🔐 Required Security Steps",
          "generate_secrets": "Generate new secrets: <code>openssl rand -base64 32</code>",
          "strong_passwords": "Use strong passwords (12+ characters)",
          "file_permissions": "Set proper file permissions: <code>chmod 600 /etc/sysmanage.yaml</code>",
          "never_commit": "Never commit configuration files to version control"
        }
      },
      "step7": {
        "title": "Step 7: Run Secure Installation Script",
        "security_note": {
          "title": "🔐 REQUIRED for New Installations",
          "description": "The secure installation script must be run to create the initial admin user and configure unique security tokens for your installation."
        },
        "features": {
          "title": "What this script does:",
          "admin_user": "Creates the initial administrative user account",
          "jwt_secret": "Generates unique JWT secret for authentication",
          "password_salt": "Generates unique password salt for secure password hashing",
          "config_hardening": "Applies security hardening to configuration files",
          "prevents_defaults": "Prevents use of default/example security tokens"
        },
        "warning": {
          "title": "⚠️ Important Security Notes",
          "required": "This step is REQUIRED",
          "required_desc": "the application will not function securely without it",
          "unique_tokens": "Each installation gets unique security tokens to prevent credential reuse",
          "run_once": "Only run this script once per installation",
          "backup_config": "Backup your configuration file after running this script"
        }
      },
      "step8": {
        "title": "Step 8: Start the Application",
        "access_description": "Access the application at:",
        "https": "HTTPS:",
        "https_url": "https://sysmanage.org:7443 (if SSL certs exist)",
        "http": "HTTP:",
        "http_url": "http://localhost:3000 (fallback)"
      }
    },
    "ssl": {
      "title": "SSL Certificates (Optional)",
      "description": "For HTTPS development, place your SSL certificates in:",
      "fallback": "If certificates are not found, the system automatically falls back to HTTP on localhost."
    },
    "troubleshooting": {
      "title": "Troubleshooting",
      "package_errors": {
        "title": "Package Build Errors",
        "missing_libpq": "Missing libpq-fe.h:",
        "install_libpq": "Install <code>libpq-dev</code> (Ubuntu) or <code>postgresql-devel</code> (RHEL)",
        "httptools_errors": "httptools build errors:",
        "install_libuv": "Install <code>libuv1-dev</code> (Ubuntu) or <code>libuv-devel</code> (RHEL)",
        "python313_issues": "Python 3.13 issues:",
        "use_older_python": "Use Python 3.11 or 3.12 instead"
      },
      "db_issues": {
        "title": "Database Connection Issues",
        "verify_postgresql": "Verify PostgreSQL is running: <code>sudo systemctl status postgresql</code>",
        "check_credentials": "Check credentials match configuration file",
        "test_connection": "Test connection with psql command shown above"
      },
      "port_conflicts": {
        "title": "Port Conflicts",
        "ensure_ports": "Ensure ports 6443 (API) and 7443 (frontend) are available",
        "check_services": "Check for existing services: <code>netstat -tlnp | grep :6443</code>",
        "modify_ports": "Modify ports in configuration if needed"
      },
      "permission_issues": {
        "title": "Permission Issues",
        "set_config_permissions": "Set configuration file permissions: <code>chmod 600 /etc/sysmanage.yaml</code>",
        "ensure_ownership": "Ensure proper ownership of directories",
        "check_venv": "Check virtual environment activation"
      }
    },
    "navigation": {
      "server_docs": "← Server Documentation",
      "config_guide": "Configuration Guide →"
    },
    "note": "Note"
  },
  "api_docs": {
    "title": "API Reference - SysManage",
    "description": "Complete REST API documentation for integrating with SysManage.",
    "section_title": "API Reference",
    "header": {
      "title": "API Reference",
      "subtitle": "Complete REST API documentation for integrating with SysManage server and managing infrastructure programmatically."
    },
    "overview": {
      "title": "Overview",
      "description": "SysManage provides a comprehensive REST API built with FastAPI, offering full programmatic access to all platform features. The API supports modern standards including OpenAPI 3.0 specification, JWT authentication, and real-time WebSocket communication.",
      "features_title": "API Features"
    }
  },
  "security_docs": {
    "title": "Security Documentation - SysManage",
    "description": "Comprehensive security documentation for SysManage including authentication, mTLS, security scanning, and best practices.",
    "section_title": "Security",
    "header": {
      "title": "Security Documentation",
      "subtitle": "Comprehensive security features, configuration, and best practices for SysManage deployments."
    },
    "database_security": {
      "title": "🗄️ Database Security",
      "description": "UUID-based primary keys and secure database design patterns for enhanced security.",
      "uuid_keys": "UUID-based primary keys prevent ID enumeration attacks",
      "replay_protection": "Non-sequential identifiers prevent replay attacks",
      "information_leakage": "Eliminates predictable resource URL patterns",
      "privacy_enhanced": "Enhanced privacy through non-correlatable identifiers",
      "gdpr_compliance": "GDPR compliance support for data anonymization",
      "secure_installation": "Secure installation script with unique tokens",
      "link": "Database Security →"
    }
  },
  "server_configuration": {
    "title": "Server Configuration Guide - SysManage",
    "description": "Complete configuration guide for SysManage server including security settings, database configuration, and advanced features.",
    "breadcrumb": {
      "server": "Server",
      "configuration": "Configuration"
    },
    "header": {
      "title": "Server Configuration Guide",
      "description": "Comprehensive configuration options for customizing your SysManage server deployment."
    },
    "file_locations": {
      "title": "Configuration File Locations",
      "linux_macos_bsd": "🐧 Linux/macOS/BSD",
      "windows": "🪟 Windows",
      "development": "🛠️ Development"
    },
    "basic": {
      "title": "Basic Configuration",
      "api_server": {
        "title": "API Server Settings",
        "notes": {
          "title": "📝 Notes",
          "host_binding": "<strong>Host binding:</strong> Use <code>0.0.0.0</code> for external access, <code>localhost</code> for local only",
          "ssl_certificates": "<strong>SSL certificates:</strong> If not provided, server falls back to HTTP",
          "port_selection": "<strong>Port selection:</strong> Ensure the port is not in use by other services"
        }
      },
      "database": {
        "title": "Database Configuration",
        "security_warning": {
          "title": "⚠️ Security Warning",
          "description": "The example password <code>abc123</code> is for development only. <strong>Always use strong passwords in production!</strong>"
        }
      },
      "webui": {
        "title": "Web UI Settings"
      }
    },
    "security": {
      "title": "Security Configuration",
      "core": {
        "title": "Core Security Settings",
        "generating_values": {
          "title": "🔐 Generating Secure Values"
        }
      },
      "password_policy": {
        "title": "Password Policy Configuration",
        "notes": {
          "title": "📝 Password Policy Notes",
          "realtime_validation": "<strong>Real-time validation:</strong> Policies are enforced in both frontend and backend",
          "multilanguage": "<strong>Multi-language:</strong> Error messages available in all 14 supported languages",
          "flexible_requirements": "<strong>Flexible requirements:</strong> Adjust policies to meet your organization's needs"
        }
      }
    },
    "email": {
      "title": "Email Configuration",
      "smtp": {
        "title": "SMTP Settings",
        "providers": {
          "title": "📧 Common SMTP Configurations",
          "gmail": "Gmail",
          "office365": "Office 365",
          "exchange": "Exchange",
          "postfix": "Postfix",
          "gmail_note": "<strong>Note:</strong> Requires 2FA and App Password. Visit <a href=\"https://support.google.com/accounts/answer/185833\" target=\"_blank\">Google App Passwords</a> for setup."
        }
      }
    },
    "certificates": {
      "title": "Certificate Management",
      "storage": {
        "title": "Certificate Storage",
        "permissions": {
          "title": "🔒 Required Permissions",
          "directory": "<strong>Certificate directory:</strong> <code>0755</code> (owner rwx, group/others rx)",
          "private_keys": "<strong>Private keys:</strong> <code>0600</code> (owner read/write only)",
          "certificates": "<strong>Certificates:</strong> <code>0644</code> (owner rw, others read)"
        }
      },
      "mtls": {
        "title": "mTLS Configuration",
        "description": "Mutual TLS settings are automatically managed by the server. When hosts are approved, client certificates are generated and stored in the certificate directory.",
        "workflow": {
          "title": "🔄 mTLS Workflow",
          "step1": "<strong>Host Registration:</strong> Agent registers with pending status",
          "step2": "<strong>Manual Approval:</strong> Administrator approves host in web interface",
          "step3": "<strong>Certificate Generation:</strong> Server generates unique client certificate",
          "step4": "<strong>Secure Authentication:</strong> Subsequent connections use mTLS"
        }
      }
    },
    "advanced": {
      "title": "Advanced Features",
      "discovery": {
        "title": "Agent Discovery Service",
        "service": {
          "title": "📡 Discovery Service",
          "description": "Allows agents to automatically discover and configure themselves with available servers on the network."
        }
      },
      "logging": {
        "title": "Logging Configuration"
      },
      "performance": {
        "title": "Performance Tuning"
      }
    },
    "permissions": {
      "title": "File Permissions and Security",
      "directory": {
        "title": "Required Directory Structure"
      },
      "security_checklist": {
        "title": "🛡️ Security Checklist",
        "config_file": "✅ Configuration file is readable only by service user",
        "cert_directory": "✅ Certificate directory has restricted access",
        "private_keys": "✅ Private keys are protected with 0600 permissions",
        "strong_passwords": "✅ Strong passwords and secrets are used",
        "jwt_rotation": "✅ JWT secrets are regularly rotated",
        "db_credentials": "✅ Database credentials are unique and strong"
      }
    },
    "environment": {
      "title": "Environment Variables",
      "description": "Configuration can also be set via environment variables (overrides YAML file):"
    },
    "testing": {
      "title": "Testing Configuration",
      "validation": {
        "title": "Validation Steps",
        "syntax": "<strong>Configuration Syntax:</strong>",
        "database": "<strong>Database Connection:</strong>",
        "email": "<strong>Email Configuration:</strong>",
        "ssl": "<strong>SSL Certificates:</strong>"
      }
    },
    "navigation": {
      "installation": "← Installation Guide",
      "deployment": "Deployment Guide →"
    }
  },
  "server_deployment": {
    "title": "Deployment Guide - SysManage Server",
    "description": "Production deployment strategies and best practices for scalable SysManage infrastructure.",
    "breadcrumb": {
      "server": "Server",
      "deployment": "Deployment"
    },
    "header": {
      "title": "Deployment Guide",
      "description": "Production deployment strategies and best practices for scalable, secure, and reliable SysManage infrastructure."
    },
    "overview": {
      "title": "Deployment Overview",
      "description": "SysManage can be deployed in various configurations depending on your infrastructure requirements, from single-server setups to highly available multi-node clusters.",
      "strategies": {
        "single": {
          "title": "🖥️ Single Server Deployment",
          "description": "Ideal for small to medium environments (up to 100 hosts)",
          "features": {
            "components": "Single server hosts all components",
            "database": "PostgreSQL database on same server",
            "configuration": "Simple configuration and maintenance",
            "resources": "Lower resource requirements"
          }
        },
        "ha": {
          "title": "🔄 High Availability Deployment",
          "description": "Production environments requiring zero downtime",
          "features": {
            "servers": "Multiple application servers",
            "load_balancer": "Load balancer with SSL termination",
            "clustering": "Database clustering with failover",
            "redundancy": "Redundant network and storage"
          }
        },
        "cloud": {
          "title": "☁️ Cloud Deployment",
          "description": "Scalable cloud-native deployment options",
          "features": {
            "orchestration": "Container orchestration (Kubernetes)",
            "scaling": "Auto-scaling capabilities",
            "database": "Managed database services",
            "availability": "Multi-region availability"
          }
        }
      }
    },
    "checklist": {
      "title": "Production Checklist",
      "pre_deployment": {
        "title": "Pre-Deployment",
        "hardware": "Server hardware/VM specifications meet requirements",
        "network": "Network connectivity and firewall rules configured",
        "ssl": "SSL certificates obtained and validated",
        "dns": "DNS records configured",
        "database": "PostgreSQL database server prepared",
        "monitoring": "Backup and monitoring systems in place"
      },
      "security": {
        "title": "Security Configuration",
        "https": "HTTPS/TLS enabled and enforced",
        "passwords": "Strong password policies configured",
        "jwt": "JWT token settings optimized",
        "database": "Database access restricted to application",
        "firewall": "Firewall rules limiting access to required ports",
        "logs": "Log file permissions and rotation configured"
      },
      "performance": {
        "title": "Performance Optimization",
        "pooling": "Database connection pooling configured",
        "assets": "Frontend assets minified and compressed",
        "caching": "Caching headers configured",
        "limits": "Resource limits set for application processes",
        "logging": "Log levels set appropriately for production"
      }
    },
    "single_server": {
      "title": "Single Server Deployment",
      "requirements": {
        "title": "System Requirements",
        "component": "Component",
        "minimum": "Minimum",
        "recommended": "Recommended"
      },
      "installation": {
        "title": "Installation Steps"
      },
      "config": {
        "title": "Production Configuration"
      }
    },
    "ha": {
      "title": "High Availability Deployment",
      "architecture": {
        "title": "Architecture Overview"
      },
      "load_balancer": {
        "title": "Load Balancer Configuration",
        "nginx": {
          "title": "Nginx Configuration"
        }
      },
      "database": {
        "title": "Database Clustering",
        "replication": {
          "title": "PostgreSQL Streaming Replication"
        }
      }
    },
    "container": {
      "title": "Container Deployment",
      "docker": {
        "title": "Docker Compose"
      },
      "kubernetes": {
        "title": "Kubernetes Deployment"
      }
    },
    "monitoring": {
      "title": "Monitoring & Logging",
      "system": {
        "title": "System Monitoring",
        "prometheus": {
          "title": "Prometheus Configuration"
        },
        "health": {
          "title": "Health Check Endpoint"
        }
      },
      "logs": {
        "title": "Log Management"
      }
    },
    "backup": {
      "title": "Backup & Disaster Recovery",
      "database": {
        "title": "Database Backup"
      },
      "disaster": {
        "title": "Disaster Recovery Plan",
        "step1": "<strong>Assessment:</strong> Determine scope of failure and affected systems",
        "step2": "<strong>Communication:</strong> Notify stakeholders and users of the incident",
        "step3": "<strong>Isolation:</strong> Isolate failed components to prevent further damage",
        "step4": "<strong>Recovery:</strong> Restore from backups or failover to standby systems",
        "step5": "<strong>Verification:</strong> Test restored systems and verify functionality",
        "step6": "<strong>Post-mortem:</strong> Document incident and improve procedures"
      }
    },
    "performance": {
      "title": "Performance Optimization",
      "database": {
        "title": "Database Tuning"
      },
      "application": {
        "title": "Application Tuning"
      },
      "caching": {
        "title": "Caching Strategy",
        "redis": "<strong>Redis:</strong> Session storage and temporary data caching",
        "cdn": "<strong>CDN:</strong> Static asset delivery and geographic distribution",
        "application": "<strong>Application Cache:</strong> Database query result caching",
        "browser": "<strong>Browser Cache:</strong> Client-side asset caching with appropriate headers"
      }
    },
    "security": {
      "title": "Security Hardening",
      "network": {
        "title": "Network Security"
      },
      "application": {
        "title": "Application Security",
        "https": "<strong>HTTPS Only:</strong> Enforce TLS for all connections",
        "hsts": "<strong>HSTS:</strong> HTTP Strict Transport Security headers",
        "csp": "<strong>CSP:</strong> Content Security Policy implementation",
        "rate_limiting": "<strong>Rate Limiting:</strong> API endpoint rate limiting",
        "input_validation": "<strong>Input Validation:</strong> Comprehensive input sanitization",
        "audit_logging": "<strong>Audit Logging:</strong> Log all administrative actions"
      }
    },
    "maintenance": {
      "title": "Maintenance & Updates",
      "procedure": {
        "title": "Update Procedure",
        "step1": "<strong>Backup:</strong> Create full system backup before updates",
        "step2": "<strong>Testing:</strong> Test updates in staging environment",
        "step3": "<strong>Maintenance Window:</strong> Schedule maintenance with user notification",
        "step4": "<strong>Update:</strong> Apply updates following documented procedures",
        "step5": "<strong>Verification:</strong> Verify all systems function correctly",
        "step6": "<strong>Rollback Plan:</strong> Have rollback procedures ready if needed"
      },
      "tasks": {
        "title": "Maintenance Tasks",
        "daily": {
          "title": "Daily",
          "monitoring": "Monitor system health and performance",
          "logs": "Review application logs for errors",
          "backup": "Verify backup completion"
        },
        "weekly": {
          "title": "Weekly",
          "security": "Review security logs and alerts",
          "packages": "Update system packages",
          "restore_test": "Test backup restoration procedures"
        },
        "monthly": {
          "title": "Monthly",
          "security": "Security vulnerability assessment",
          "performance": "Performance analysis and optimization",
          "capacity": "Capacity planning review"
        }
      }
    }
  },
  "common": {
    "overview": "Overview",
    "features": "Features",
    "installation": "Installation",
    "configuration": "Configuration",
    "troubleshooting": "Troubleshooting",
    "security": "Security",
    "next": "Next",
    "previous": "Previous",
    "back_to_top": "Back to Top",
    "read_more": "Read More",
    "learn_more": "Learn More",
    "download": "Download",
    "github": "GitHub",
    "documentation": "Documentation"
  },
  "testing": {
    "title": "Testing",
    "breadcrumb": "Testing",
    "subtitle": "Comprehensive testing strategy for SysManage server including unit tests, integration tests, and end-to-end testing with Playwright.",
    "description": "Comprehensive testing guide for SysManage including unit tests, integration tests, and E2E testing with Playwright.",
    "overview": {
      "title": "Testing Strategy Overview",
      "description": "SysManage employs a multi-layered testing approach to ensure reliability, security, and functionality across all components:",
      "unit": {
        "title": "Unit Tests",
        "description": "Comprehensive unit testing for individual components and functions",
        "backend": {
          "text": "Backend:",
          "count": "1,432 Python tests using pytest"
        },
        "frontend": {
          "text": "Frontend:",
          "count": "63 TypeScript tests using Vitest"
        },
        "coverage": {
          "text": "Coverage:",
          "value": "100% test coverage for both backend and frontend"
        }
      },
      "integration": {
        "title": "Integration Tests",
        "description": "Testing interactions between different system components",
        "api": "API endpoint testing",
        "database": "Database integration testing",
        "websocket": "WebSocket communication testing",
        "auth": "Authentication and authorization flow testing"
      },
      "e2e": {
        "title": "End-to-End (E2E) Tests",
        "description": "Revolutionary cross-platform UI testing framework with intelligent browser selection",
        "journey": "Full user journey testing with real database integration",
        "crossbrowser": "Cross-browser compatibility (Chrome, Firefox, Safari/WebKit)",
        "crossplatform": "Cross-platform support (Linux, macOS, Windows, OpenBSD, FreeBSD)",
        "realworld": "Real-world scenario validation with production-like setup",
        "ui": "UI interaction and workflow testing with Argon2 authentication",
        "framework": "Triple testing framework: Playwright (primary) + Selenium (fallback) + CI/CD integration",
        "link": "→ Complete UI Testing Documentation"
      },
      "msw": {
        "title": "Mock Service Worker (MSW)",
        "description": "API mocking for isolated and reliable frontend testing",
        "isolation": "Complete test isolation from backend dependencies",
        "speed": "Faster test execution without network requests",
        "reliability": "Consistent and predictable test behavior",
        "realistic": "Realistic API response simulation"
      }
    },
    "running": {
      "title": "Running Tests",
      "all": {
        "title": "All Tests"
      },
      "backend": {
        "title": "Backend Tests (Python/pytest)"
      },
      "frontend": {
        "title": "Frontend Tests (TypeScript/Vitest with MSW)",
        "description": "Frontend tests automatically use Mock Service Worker for API mocking:",
        "msw": {
          "title": "MSW Behavior",
          "description": "When running frontend tests:",
          "automatic": "MSW automatically intercepts all API requests",
          "logging": "Request logs appear in console output",
          "isolation": "Each test runs in complete isolation",
          "realistic": "Realistic API responses are provided automatically"
        }
      },
      "e2e": {
        "title": "End-to-End Tests (Playwright)"
      }
    },
    "msw": {
      "title": "Mock Service Worker (MSW) Frontend Testing",
      "overview": {
        "title": "Overview",
        "description": "Mock Service Worker (MSW) is a powerful API mocking library that intercepts HTTP requests at the network level, providing realistic API responses for frontend testing. SysManage uses MSW extensively to ensure frontend components can be tested in isolation without requiring a running backend server."
      },
      "benefits": {
        "title": "Why MSW?",
        "isolation": "Test Isolation: Frontend tests run independently of backend availability",
        "speed": "Performance: No network latency, tests execute faster",
        "reliability": "Reliability: Consistent responses eliminate flaky tests",
        "development": "Development: Work on frontend features before backend APIs are ready",
        "cicd": "CI/CD: No need to spin up backend services in test environments"
      },
      "installation": {
        "title": "Installation & Configuration",
        "description": "MSW is already installed and configured in the SysManage frontend. The setup includes:"
      },
      "implementation": {
        "title": "Implementation Architecture"
      },
      "handlers": {
        "title": "Request Handlers",
        "description": "MSW handlers are defined in /src/mocks/handlers.ts and provide comprehensive API coverage:"
      },
      "server": {
        "title": "Test Server Setup",
        "description": "The MSW server is configured for Node.js test environments in /src/mocks/node.ts:"
      },
      "integration": {
        "title": "Test Integration",
        "description": "MSW is automatically configured for all tests in /src/setupTests.ts with proper lifecycle management:"
      },
      "features": {
        "title": "Key Features",
        "dynamic": {
          "title": "Dynamic Path Handling",
          "description": "MSW uses broad pattern matching with dynamic path resolution:",
          "wildcard": "Wildcard patterns catch all /api/* requests",
          "parsing": "URL parsing extracts specific endpoint paths",
          "fallback": "Graceful fallback for unmatched endpoints"
        },
        "realistic": {
          "title": "Realistic Response Simulation",
          "description": "MSW provides comprehensive mock data that mirrors real API responses:",
          "hosts": "Complete host information with hardware details",
          "users": "User authentication and profile data",
          "packages": "Software package data with search functionality",
          "operations": "Package installation/uninstallation operations"
        },
        "ci": {
          "title": "CI/CD Integration",
          "description": "MSW includes special handling for continuous integration environments:"
        }
      },
      "usage": {
        "title": "Usage in Tests",
        "automatic": {
          "title": "Automatic API Mocking",
          "description": "Most tests automatically benefit from MSW without additional configuration:"
        },
        "custom": {
          "title": "Custom Handler Overrides",
          "description": "Tests can override specific handlers for custom scenarios:"
        }
      },
      "compatibility": {
        "title": "React 19 Compatibility",
        "description": "SysManage includes special compatibility fixes for React 19 in the test environment:"
      },
      "bestpractices": {
        "title": "Best Practices",
        "isolation": "Test Isolation: MSW automatically resets handlers between tests",
        "realistic": "Realistic Data: Use mock data that closely matches production API responses",
        "coverage": "API Coverage: Ensure all API endpoints used by components are mocked",
        "errors": "Error Scenarios: Test both success and error responses",
        "logging": "Request Logging: Use MSW logging to debug unexpected API calls"
      },
      "debugging": {
        "title": "Debugging MSW",
        "description": "If tests fail due to API issues, check:",
        "console": "Console output for MSW request logs",
        "unhandled": "Warnings about unhandled requests",
        "handlers": "Handler patterns match actual API calls",
        "setup": "MSW server is properly started in test setup"
      }
    }
  },
  "ui_testing": {
    "title": "Cross-Platform UI Testing Framework - SysManage",
    "description": "Revolutionary triple testing framework featuring Playwright (primary), Selenium (fallback), and comprehensive CI/CD integration for cross-platform UI testing excellence.",
    "breadcrumb": "UI Testing",
    "header": {
      "title": "Cross-Platform UI Testing Framework",
      "subtitle": "Enterprise-grade UI testing with intelligent browser selection and cross-platform compatibility"
    },
    "overview": {
      "title": "Framework Overview",
      "description": "SysManage implements a revolutionary triple testing framework that automatically adapts to platform capabilities, ensuring comprehensive UI test coverage across all supported environments.",
      "architecture": {
        "title": "🏗️ Triple Testing Architecture",
        "playwright_primary": "Playwright (Primary): Linux, macOS, Windows - Full cross-browser support with Chrome, Firefox, and WebKit",
        "selenium_fallback": "Selenium (Fallback): OpenBSD, FreeBSD - Reliable WebDriver automation where Playwright is unavailable",
        "cicd_integration": "CI/CD Integration: GitHub Actions with fail-fast logic and comprehensive error reporting"
      },
      "benefits": {
        "title": "Key Benefits",
        "cross_platform": "Cross-Platform Excellence: Seamless testing across 5 operating systems",
        "cross_browser": "Cross-Browser Compatibility: Chrome, Firefox, Safari/WebKit support",
        "intelligent_selection": "Intelligent Selection: Framework automatically chooses optimal testing tool per platform",
        "production_parity": "Production Parity: Real database integration with proper user lifecycle management",
        "ci_optimization": "CI/CD Optimized: Fail-fast execution with comprehensive debugging output"
      }
    },
    "playwright": {
      "title": "Playwright Testing (Primary Framework)",
      "description": "Modern browser automation framework providing cross-browser testing with enterprise-grade reliability.",
      "features": {
        "title": "🎭 Playwright Features",
        "cross_browser": "Cross-Browser Testing: Chromium, Firefox, WebKit (Safari) support",
        "async_native": "Async Native: Built for modern JavaScript with native async/await support",
        "auto_wait": "Auto-Wait: Intelligent waiting for elements without explicit sleeps",
        "network_interception": "Network Interception: Mock and monitor network requests",
        "mobile_testing": "Mobile Testing: Device emulation and touch interaction support",
        "screenshots": "Automatic Screenshots: Failure debugging with visual evidence"
      },
      "browser_support": {
        "title": "Browser Support Matrix",
        "chromium": "Chromium: Full support on all platforms (Linux, macOS, Windows)",
        "firefox": "Firefox: Full support on all platforms",
        "webkit": "WebKit (Safari): macOS only - automatically excluded on other platforms"
      },
      "configuration": {
        "title": "Configuration",
        "conftest": "Playwright fixtures defined in /tests/ui/conftest.py",
        "database": "Real PostgreSQL database integration with proper user injection",
        "authentication": "Argon2 password hashing with salt from sysmanage.yaml",
        "cleanup": "Automatic test user cleanup after test completion"
      }
    },
    "selenium": {
      "title": "Selenium Testing (Fallback Framework)",
      "description": "Reliable WebDriver automation framework serving as intelligent fallback for platforms where Playwright is unavailable.",
      "use_cases": {
        "title": "🔄 When Selenium is Used",
        "openbsd": "OpenBSD: Primary testing framework (Playwright unavailable)",
        "freebsd": "FreeBSD: Primary testing framework (Playwright unavailable)",
        "legacy_systems": "Legacy Systems: Broader compatibility with older browsers",
        "specific_drivers": "Specific Drivers: When particular WebDriver features are required"
      },
      "features": {
        "title": "Selenium Features",
        "webdriver": "WebDriver Standard: Industry-standard browser automation protocol",
        "broad_support": "Broad Browser Support: Chrome, Firefox, Edge, Safari compatibility",
        "stable_api": "Stable API: Mature and well-documented automation interface",
        "cross_platform": "Cross-Platform: Consistent behavior across all operating systems"
      },
      "configuration": {
        "title": "Configuration",
        "webdriver_manager": "Automatic WebDriver management with webdriver-manager",
        "browser_detection": "Intelligent browser detection and driver selection",
        "timeout_handling": "Robust timeout and error handling",
        "screenshot_support": "Screenshot capture for debugging failed tests"
      }
    },
    "database_integration": {
      "title": "Database Integration",
      "description": "Sophisticated database integration ensuring tests run against real PostgreSQL with proper user lifecycle management.",
      "user_injection": {
        "title": "🔐 Test User Injection",
        "argon2_hashing": "Argon2 Password Hashing: Production-grade password security with configurable salt",
        "yaml_configuration": "YAML Configuration: Salt and database credentials from sysmanage.yaml",
        "unique_users": "Unique Test Users: Each test run creates isolated test users",
        "proper_cleanup": "Proper Cleanup: Test users automatically removed after test completion"
      },
      "database_setup": {
        "title": "Database Setup",
        "real_postgres": "Real PostgreSQL: Tests run against actual production database schema",
        "schema_sync": "Schema Synchronization: Automatic schema migration before tests",
        "transaction_isolation": "Transaction Isolation: Each test runs in isolated database transaction",
        "rollback_support": "Rollback Support: Clean state restoration between test runs"
      }
    },
    "cross_platform": {
      "title": "Cross-Platform Testing Strategy",
      "description": "Comprehensive testing strategy ensuring consistent behavior across all supported operating systems.",
      "platform_matrix": {
        "title": "📊 Platform Testing Matrix",
        "linux": "Linux: Playwright with full browser support (Chrome, Firefox, WebKit excluded)",
        "macos": "macOS: Playwright with complete browser support (Chrome, Firefox, WebKit)",
        "windows": "Windows: Playwright with full browser support (Chrome, Firefox, WebKit excluded)",
        "openbsd": "OpenBSD: Selenium with Chrome/Firefox support",
        "freebsd": "FreeBSD: Selenium with Chrome/Firefox support"
      },
      "intelligent_selection": {
        "title": "🧠 Intelligent Framework Selection",
        "makefile_logic": "Makefile Logic: Automatic framework selection based on platform detection",
        "playwright_preferred": "Playwright Preferred: Used when available for superior performance",
        "selenium_fallback": "Selenium Fallback: Automatic fallback for unsupported platforms",
        "transparent_switching": "Transparent Switching: Same test interface regardless of underlying framework"
      }
    },
    "cicd_integration": {
      "title": "CI/CD Integration",
      "description": "Enterprise-grade CI/CD integration with GitHub Actions providing automated testing on every commit and pull request.",
      "github_actions": {
        "title": "🚀 GitHub Actions Workflow",
        "fail_fast": "Fail-Fast Logic: Stop execution immediately on first test failure",
        "parallel_execution": "Parallel Execution: Backend, Frontend, and UI tests run concurrently",
        "comprehensive_logging": "Comprehensive Logging: Detailed output for debugging failed tests",
        "artifact_collection": "Artifact Collection: Screenshots and logs preserved for analysis"
      },
      "workflow_steps": {
        "title": "Workflow Execution Steps",
        "setup": "Environment Setup: Python, Node.js, and browser installation",
        "dependency_install": "Dependency Installation: Backend and frontend dependencies",
        "database_setup": "Database Setup: PostgreSQL initialization and schema migration",
        "server_startup": "Server Startup: Application startup with health checks",
        "test_execution": "Test Execution: Parallel test suite execution with failure detection",
        "cleanup": "Cleanup: Resource cleanup and artifact preservation"
      },
      "badges": {
        "title": "Status Badges",
        "ui_tests": "UI Tests: Green 'Passing' / Red 'Failing' status badge",
        "integration": "README Integration: Visible test status in project documentation",
        "real_time": "Real-Time Updates: Automatic badge updates on test completion"
      }
    },
    "test_structure": {
      "title": "Test Structure and Organization",
      "description": "Well-organized test structure ensuring maintainability and comprehensive coverage.",
      "file_organization": {
        "title": "📁 File Organization",
        "conftest_playwright": "/tests/ui/conftest.py - Playwright fixtures and configuration",
        "conftest_selenium": "/tests/ui/conftest_selenium.py - Selenium fixtures and configuration",
        "test_files": "/tests/ui/test_*.py - Individual test files with specific scenarios",
        "cross_browser": "/tests/ui/test_login_cross_browser.py - Cross-browser login testing"
      },
      "test_scenarios": {
        "title": "Test Scenarios",
        "login_flow": "Login Flow: Complete authentication workflow testing",
        "cross_browser": "Cross-Browser: Identical tests across Chrome, Firefox, WebKit",
        "error_handling": "Error Handling: Invalid credentials and error message validation",
        "navigation": "Navigation: Post-login navigation and user interface validation",
        "responsive": "Responsive Design: UI testing across different viewport sizes"
      }
    },
    "makefile_integration": {
      "title": "Makefile Integration",
      "description": "Seamless integration with existing build system providing simple commands for complex testing operations.",
      "commands": {
        "title": "🔧 Available Commands",
        "test_ui": "make test-ui: Run all UI tests with intelligent framework selection",
        "test_playwright": "make test-playwright: Force Playwright execution (if available)",
        "test_selenium": "make test-selenium: Force Selenium execution",
        "test_all": "make test: Run complete test suite (Backend + Frontend + UI)",
        "install_browsers": "make install-browsers: Install required browser dependencies"
      },
      "platform_detection": {
        "title": "Platform Detection Logic",
        "automatic": "Automatic Detection: Makefile detects OS and selects appropriate framework",
        "dependency_check": "Dependency Check: Verifies required browsers and drivers are available",
        "graceful_fallback": "Graceful Fallback: Falls back to Selenium if Playwright unavailable",
        "error_reporting": "Error Reporting: Clear messages when dependencies are missing"
      }
    },
    "debugging": {
      "title": "Debugging and Troubleshooting",
      "description": "Comprehensive debugging capabilities ensuring rapid issue resolution and test reliability.",
      "screenshot_capture": {
        "title": "📸 Screenshot Capture",
        "automatic": "Automatic Capture: Screenshots taken on test failure",
        "timestamped": "Timestamped Files: Screenshots saved with timestamp for analysis",
        "browser_context": "Browser Context: Screenshots include browser and page state",
        "storage_location": "Storage Location: Screenshots saved to /tmp/claude/ for examination"
      },
      "logging": {
        "title": "Logging and Diagnostics",
        "verbose_output": "Verbose Output: Detailed test execution logs",
        "browser_logs": "Browser Logs: Console output and JavaScript errors captured",
        "network_logs": "Network Logs: HTTP requests and responses monitored",
        "timing_info": "Timing Information: Performance metrics for slow operations"
      },
      "common_issues": {
        "title": "Common Issues and Solutions",
        "browser_not_found": "Browser Not Found: Install missing browsers with make install-browsers",
        "timeout_errors": "Timeout Errors: Increase wait times for slow-loading elements",
        "database_connection": "Database Connection: Verify PostgreSQL is running and accessible",
        "permission_errors": "Permission Errors: Check file permissions for screenshot directory"
      }
    },
    "best_practices": {
      "title": "Best Practices",
      "description": "Industry best practices for maintainable and reliable UI testing.",
      "test_design": {
        "title": "🎯 Test Design Principles",
        "page_object": "Page Object Pattern: Encapsulate page interactions in reusable objects",
        "data_driven": "Data-Driven Tests: Parameterized tests for comprehensive scenario coverage",
        "independent": "Test Independence: Each test runs independently without dependencies",
        "idempotent": "Idempotent Tests: Tests can run multiple times with consistent results"
      },
      "maintenance": {
        "title": "Maintenance Guidelines",
        "regular_updates": "Regular Updates: Keep browser and framework versions current",
        "flaky_test": "Flaky Test Management: Identify and fix unreliable tests promptly",
        "performance": "Performance Monitoring: Track test execution times and optimize slow tests",
        "coverage": "Coverage Analysis: Ensure adequate coverage of critical user workflows"
      }
    },
    "navigation": {
      "title": "Quick Navigation",
      "testing": "← Testing Overview",
      "database_security": "Database Security →"
    }
  },
  "database_security": {
    "title": "Database Security - SysManage",
    "description": "Comprehensive database security documentation for SysManage including UUID-based primary keys, secure installation, and database hardening.",
    "breadcrumb": "Database Security",
    "header": {
      "title": "Database Security",
      "subtitle": "Advanced database security features including UUID-based primary keys, secure installation procedures, and database hardening techniques."
    },
    "uuid_architecture": {
      "title": "UUID-Based Primary Key Architecture",
      "description": "SysManage implements UUID-based primary keys across all database tables instead of traditional sequential integer IDs. This architectural decision provides significant security advantages and prevents common attack vectors.",
      "benefits": {
        "title": "Security Benefits",
        "enumeration": {
          "title": "🛡️ ID Enumeration Attack Prevention",
          "description": "Sequential IDs (1, 2, 3...) allow attackers to easily enumerate resources. UUIDs eliminate this vulnerability by using non-predictable identifiers."
        },
        "replay": {
          "title": "🔄 Replay Attack Protection",
          "description": "Non-sequential identifiers prevent attackers from predicting valid resource IDs for replay attacks or automated scanning."
        },
        "information_leakage": {
          "title": "🔒 Information Leakage Prevention",
          "description": "Sequential IDs can reveal business metrics (number of users, hosts, etc.). UUIDs prevent this information disclosure."
        },
        "privacy": {
          "title": "🕵️ Enhanced Privacy Protection",
          "description": "UUIDs provide non-correlatable identifiers that enhance user privacy and prevent cross-system tracking."
        },
        "gdpr": {
          "title": "📋 GDPR Compliance Support",
          "description": "UUIDs support data anonymization requirements by providing identifiers that cannot be easily correlated across systems."
        },
        "distributed": {
          "title": "🌐 Distributed System Security",
          "description": "UUIDs are globally unique, preventing ID conflicts in distributed systems and reducing attack surface in multi-tenant environments."
        }
      }
    },
    "examples": {
      "vulnerable": "❌ Vulnerable (Sequential):",
      "secure": "✅ Secure (UUID):"
    },
    "secure_installation": {
      "title": "Secure Installation Script",
      "description": "SysManage includes a mandatory secure installation script that must be run on new installations to establish proper security foundations.",
      "script_location": {
        "title": "Script Location",
        "path": "scripts/sysmanage_secure_installation"
      },
      "features": {
        "title": "Security Features Implemented",
        "admin_user": {
          "title": "👤 Initial Admin User Creation",
          "secure_password": "Prompts for secure administrator password",
          "password_validation": "Enforces password complexity requirements",
          "no_defaults": "Prevents use of default or example credentials"
        },
        "jwt_security": {
          "title": "🔐 JWT Security Token Generation",
          "unique_secret": "Generates cryptographically secure unique JWT secret",
          "entropy": "Uses high-entropy random data for token generation",
          "prevents_reuse": "Prevents credential reuse across installations"
        },
        "password_salt": {
          "title": "🧂 Password Salt Generation",
          "unique_salt": "Creates unique password salt for each installation",
          "rainbow_protection": "Prevents rainbow table attacks",
          "secure_hashing": "Enhances password hashing security"
        },
        "config_hardening": {
          "title": "⚙️ Configuration File Hardening",
          "file_permissions": "Sets restrictive file permissions (600)",
          "ownership": "Ensures proper file ownership",
          "validation": "Validates configuration security settings"
        }
      },
      "requirements": {
        "title": "⚠️ Security Requirements",
        "mandatory": "Mandatory execution:",
        "mandatory_desc": "The script MUST be run before first use",
        "run_once": "Run once only:",
        "run_once_desc": "Execute only once per installation",
        "backup": "Configuration backup:",
        "backup_desc": "Backup configuration file after script execution",
        "no_defaults": "No default credentials:",
        "no_defaults_desc": "System will not function with default security tokens"
      }
    },
    "implementation": {
      "title": "Implementation Details",
      "database_schema": {
        "title": "Database Schema Design",
        "description": "All primary keys in SysManage use UUID version 4 (random) for maximum security:",
        "example_title": "Example Table Definitions:"
      },
      "api_security": {
        "title": "API Security Considerations",
        "validation": {
          "title": "UUID Validation",
          "format": "All UUID inputs are validated for proper format",
          "pydantic": "Pydantic models enforce UUID typing",
          "rejection": "Invalid UUIDs are immediately rejected"
        },
        "authorization": {
          "title": "Authorization Checks",
          "resource_ownership": "Resource ownership validated before UUID resolution",
          "rbac": "Role-based access control applied to UUID-referenced resources",
          "no_enumeration": "No information disclosure even for invalid UUIDs"
        }
      }
    },
    "best_practices": {
      "title": "Database Security Best Practices",
      "production": {
        "title": "🏭 Production Deployment",
        "encryption": "Enable database encryption at rest",
        "ssl": "Use SSL/TLS for database connections",
        "credentials": "Store database credentials securely",
        "network": "Restrict database network access",
        "monitoring": "Implement database activity monitoring"
      },
      "backup": {
        "title": "💾 Backup and Recovery",
        "encrypted": "Use encrypted database backups",
        "secure_storage": "Store backups in secure locations",
        "access_control": "Implement backup access controls",
        "testing": "Regularly test backup restoration",
        "retention": "Follow data retention policies"
      },
      "maintenance": {
        "title": "🔧 Maintenance and Updates",
        "patches": "Apply security patches promptly",
        "migration_testing": "Test database migrations in staging",
        "schema_review": "Review schema changes for security implications",
        "audit_logs": "Maintain comprehensive audit logs",
        "performance": "Monitor database performance and security metrics"
      }
    },
    "migration": {
      "title": "Migration from Sequential IDs",
      "description": "SysManage has been fully migrated from sequential integer IDs to UUIDs using a comprehensive migration strategy.",
      "process": {
        "title": "Migration Process",
        "step1": {
          "title": "Step 1: Schema Migration",
          "description": "Alembic migrations converted all primary keys and foreign keys from integers to UUIDs"
        },
        "step2": {
          "title": "Step 2: Data Migration",
          "description": "Existing data was migrated with new UUID identifiers while preserving relationships"
        },
        "step3": {
          "title": "Step 3: API Updates",
          "description": "All API endpoints updated to handle UUID parameters and responses"
        },
        "step4": {
          "title": "Step 4: Frontend Updates",
          "description": "Frontend components updated to work with UUID identifiers"
        }
      },
      "benefits": {
        "title": "Post-Migration Security Benefits",
        "attack_surface": "Dramatically reduced attack surface",
        "enumeration": "Eliminated ID enumeration vulnerabilities",
        "information_disclosure": "Prevented information disclosure through predictable IDs",
        "compliance": "Enhanced regulatory compliance posture",
        "future_proof": "Future-proofed against sequential ID-based attacks"
      }
    },
    "navigation": {
      "security_docs": "← Security Documentation",
      "best_practices": "Security Best Practices →"
    }
  },
  "multi_os_cicd": {
    "page_title": "Multi-OS CI/CD Pipeline - SysManage Documentation",
    "breadcrumb": "Multi-OS CI/CD",
    "main_title": "Enterprise Multi-OS CI/CD Pipeline",
    "intro": "SysManage implements a <strong>revolutionary zero-cost multi-OS CI/CD pipeline</strong> using GitHub Actions, delivering enterprise-grade testing and deployment capabilities across Linux, macOS, and Windows platforms without infrastructure costs.",
    "key_benefits_title": "🚀 Key Enterprise Benefits",
    "benefit_1": "<strong>Zero Infrastructure Costs:</strong> Complete CI/CD pipeline using GitHub's free runners",
    "benefit_2": "<strong>Multi-Platform Excellence:</strong> Simultaneous testing across 3 major operating systems",
    "benefit_3": "<strong>Fail-Fast Architecture:</strong> Immediate failure detection saves compute resources",
    "benefit_4": "<strong>Enterprise Reliability:</strong> Production-grade testing with comprehensive validation",
    "tabs": {
      "overview": "Overview",
      "github_actions": "GitHub Actions",
      "matrix_testing": "Matrix Testing",
      "platform_specific": "Platform-Specific",
      "best_practices": "Best Practices"
    },
    "overview": {
      "title": "CI/CD Pipeline Architecture",
      "description": "SysManage's CI/CD pipeline represents a <strong>paradigm shift in cost-effective enterprise deployment</strong>, leveraging GitHub Actions' matrix strategy to deliver comprehensive multi-OS testing without dedicated infrastructure investment.",
      "pipeline_title": "🏗️ Pipeline Components",
      "backend_title": "🔧 Backend Testing",
      "backend_desc": "Comprehensive Python test suite with pytest, database integration, and security validation",
      "backend_feature_1": "1,432+ unit and integration tests",
      "backend_feature_2": "Real PostgreSQL database testing",
      "backend_feature_3": "Security scanning and validation",
      "backend_feature_4": "Code coverage analysis (66%+)",
      "frontend_title": "🌐 Frontend Testing",
      "frontend_desc": "TypeScript/React testing with Vitest, Mock Service Worker, and component validation",
      "frontend_feature_1": "63+ TypeScript unit tests",
      "frontend_feature_2": "Mock Service Worker integration",
      "frontend_feature_3": "Component rendering validation",
      "frontend_feature_4": "Code coverage tracking",
      "ui_title": "🎭 UI Testing",
      "ui_desc": "Cross-platform UI testing with Playwright and Selenium fallback for comprehensive browser coverage",
      "ui_feature_1": "Playwright for modern browsers",
      "ui_feature_2": "Selenium fallback for BSD systems",
      "ui_feature_3": "Real database integration",
      "ui_feature_4": "Cross-browser compatibility",
      "execution_title": "⚡ Pipeline Execution Strategy",
      "workflow_title": "🔄 Workflow Orchestration"
    },
    "github_actions": {
      "title": "GitHub Actions Implementation",
      "description": "SysManage leverages <strong>GitHub Actions matrix strategy</strong> to deliver enterprise-grade CI/CD capabilities with zero infrastructure costs, providing the reliability and scalability typically associated with expensive dedicated CI/CD platforms.",
      "workflow_title": "📋 Workflow Configuration",
      "triggers_title": "🚀 Automated Triggers",
      "triggers_desc": "Pipeline executes automatically on code changes",
      "push_main": "Push to main branch",
      "pull_requests": "All pull requests",
      "schedule": "Scheduled maintenance runs",
      "manual": "Manual workflow dispatch",
      "matrix_title": "🎯 Matrix Strategy Implementation",
      "matrix_desc": "Parallel execution across multiple environments",
      "os_ubuntu": "ubuntu-latest (Primary Linux)",
      "os_macos": "macos-latest (Apple Silicon)",
      "os_windows": "windows-latest (Windows Server)",
      "python_versions": "Python 3.11 and 3.12 support",
      "optimization_title": "⚡ Performance Optimization",
      "optimization_desc": "Advanced pipeline optimization techniques",
      "fail_fast": "Fail-fast strategy stops execution on first failure",
      "caching": "Intelligent dependency caching across runs",
      "parallel": "Parallel job execution maximizes throughput",
      "resource": "Resource-efficient execution minimizes costs"
    },
    "matrix_testing": {
      "title": "Multi-OS Matrix Testing Strategy",
      "description": "SysManage's matrix testing strategy delivers <strong>comprehensive cross-platform validation</strong> ensuring consistent behavior across all supported operating systems while maintaining zero infrastructure costs.",
      "strategy_title": "🎯 Testing Strategy",
      "comprehensive_title": "📊 Comprehensive Platform Coverage",
      "comprehensive_desc": "Every commit tested across all target platforms",
      "linux_testing": "Linux: Ubuntu LTS with full dependency stack",
      "macos_testing": "macOS: Native Apple Silicon execution environment",
      "windows_testing": "Windows: Server 2022 with PowerShell automation",
      "bsd_simulation": "BSD: Simulated testing via Docker containers",
      "validation_title": "✅ Validation Levels",
      "validation_desc": "Multi-layered validation ensures production readiness",
      "unit_tests": "Unit Tests: Component-level functionality validation",
      "integration_tests": "Integration Tests: Cross-component interaction validation",
      "ui_tests": "UI Tests: User interface and workflow validation",
      "security_tests": "Security Tests: Vulnerability scanning and compliance",
      "intelligent_title": "🧠 Intelligent Test Execution",
      "intelligent_desc": "Smart test execution adapts to platform capabilities",
      "platform_detection": "Automatic platform capability detection",
      "framework_selection": "Optimal testing framework selection per platform",
      "graceful_degradation": "Graceful degradation for unsupported features",
      "comprehensive_reporting": "Comprehensive reporting across all platforms"
    },
    "platform_specific": {
      "title": "Platform-Specific Testing Features",
      "description": "SysManage implements <strong>platform-aware testing strategies</strong> that leverage unique capabilities of each operating system while maintaining consistent validation standards across all platforms.",
      "linux_title": "🐧 Linux (Ubuntu) Testing",
      "linux_desc": "Primary development and testing platform with comprehensive tooling",
      "linux_full_stack": "Full stack testing with PostgreSQL",
      "linux_docker": "Docker container testing and validation",
      "linux_packaging": "Package management testing (apt/dpkg)",
      "linux_systemd": "systemd service integration testing",
      "macos_title": "🍎 macOS Testing",
      "macos_desc": "Native Apple Silicon testing with platform-specific features",
      "macos_webkit": "WebKit/Safari browser testing",
      "macos_homebrew": "Homebrew package management testing",
      "macos_launchd": "launchd service integration testing",
      "macos_security": "macOS security feature validation",
      "windows_title": "🪟 Windows Testing",
      "windows_desc": "Windows Server environment with PowerShell automation",
      "windows_powershell": "PowerShell script testing and validation",
      "windows_iis": "IIS web server integration testing",
      "windows_services": "Windows service management testing",
      "windows_security": "Windows security feature validation",
      "cross_platform_title": "🌍 Cross-Platform Consistency",
      "cross_platform_desc": "Ensuring consistent behavior across all platforms",
      "api_consistency": "API behavior consistency validation",
      "config_portability": "Configuration file portability testing",
      "database_compatibility": "Database driver compatibility across platforms",
      "network_behavior": "Network communication consistency validation"
    },
    "best_practices": {
      "title": "Enterprise CI/CD Best Practices",
      "description": "SysManage's CI/CD pipeline implements <strong>industry-leading best practices</strong> delivering enterprise-grade reliability and efficiency typically found in costly commercial CI/CD platforms.",
      "cost_title": "💰 Zero-Cost Enterprise Benefits",
      "cost_desc": "Delivering premium CI/CD capabilities without infrastructure investment",
      "github_runners": "GitHub-hosted runners eliminate server costs",
      "matrix_efficiency": "Matrix strategy maximizes testing coverage per dollar",
      "intelligent_caching": "Intelligent caching reduces execution time and costs",
      "resource_optimization": "Resource optimization minimizes compute usage",
      "security_title": "🔒 Security and Compliance",
      "security_desc": "Enterprise-grade security integrated throughout the pipeline",
      "secret_management": "Secure secret management with GitHub Secrets",
      "vulnerability_scanning": "Automated vulnerability scanning in every build",
      "dependency_checking": "Dependency security validation",
      "compliance_reporting": "Compliance reporting and audit trails",
      "reliability_title": "🛡️ Reliability and Monitoring",
      "reliability_desc": "Production-grade reliability with comprehensive monitoring",
      "health_checks": "Automated health checks and service validation",
      "failure_detection": "Immediate failure detection and notification",
      "retry_logic": "Intelligent retry logic for transient failures",
      "performance_monitoring": "Performance monitoring and optimization",
      "enterprise_title": "🏢 Enterprise Integration",
      "enterprise_desc": "Seamless integration with enterprise development workflows",
      "branch_protection": "Branch protection rules enforce quality gates",
      "required_checks": "Required status checks prevent broken deployments",
      "automated_deployment": "Automated deployment to staging environments",
      "rollback_capability": "Automated rollback capability for failed deployments",
      "value_title": "💎 Enterprise Value Proposition",
      "value_desc": "SysManage's CI/CD pipeline delivers <strong>measurable enterprise value</strong> through reduced deployment risks, faster time-to-market, improved code quality, and zero infrastructure overhead - typically saving organizations thousands of dollars in CI/CD platform costs while delivering superior reliability and performance.",
      "cost_savings": "$0/month",
      "cost_savings_label": "Infrastructure Costs",
      "reliability_metric": "99.9%",
      "reliability_label": "Pipeline Reliability",
      "coverage_metric": "100%",
      "coverage_label": "Platform Coverage"
    }
  },
  "performance_testing": {
    "page_title": "Performance Testing with Artillery - SysManage Documentation",
    "breadcrumb": "Performance Testing",
    "main_title": "Enterprise-Grade Performance Testing with Artillery",
    "intro": "SysManage implements a <strong>comprehensive performance testing framework</strong> using Artillery for backend API load testing, combined with Playwright for frontend performance monitoring. This enterprise-grade approach ensures optimal system performance across all deployment environments and scales.",
    "key_benefits_title": "🚀 Key Enterprise Benefits",
    "benefit_1": "<strong>Production-Ready Load Testing:</strong> Comprehensive API performance validation",
    "benefit_2": "<strong>Multi-Platform Testing:</strong> Validated across Linux, macOS, and Windows",
    "benefit_3": "<strong>Automated Regression Detection:</strong> Continuous performance monitoring in CI/CD",
    "benefit_4": "<strong>Enterprise Scalability:</strong> Performance budgets and SLA validation",
    "tabs": {
      "overview": "Overview",
      "artillery": "Artillery Backend",
      "playwright": "Playwright Frontend",
      "ci_integration": "CI/CD Integration",
      "enterprise": "Enterprise Features"
    },
    "overview": {
      "title": "Performance Testing Architecture",
      "description": "SysManage's performance testing framework provides <strong>dual-layer performance validation</strong> covering both backend API performance and frontend user experience metrics. This comprehensive approach ensures optimal performance across the entire application stack.",
      "framework_title": "📊 Testing Framework Components",
      "backend_title": "🔧 Backend API Testing",
      "backend_desc": "Artillery-based load testing with realistic user scenarios, authentication flows, and API endpoint validation",
      "backend_feature_1": "Multi-phase load testing (warm-up, normal, peak)",
      "backend_feature_2": "WebSocket connection testing",
      "backend_feature_3": "Authentication flow validation",
      "backend_feature_4": "Performance budget enforcement",
      "frontend_title": "🌐 Frontend Performance Testing",
      "frontend_desc": "Playwright-powered Core Web Vitals monitoring and user experience performance validation",
      "frontend_feature_1": "First Contentful Paint (FCP) monitoring",
      "frontend_feature_2": "DOM Content Loaded (DCL) timing",
      "frontend_feature_3": "Network performance analysis",
      "frontend_feature_4": "Memory usage tracking",
      "execution_title": "⚡ Performance Testing Execution",
      "requirements_title": "📋 Prerequisites",
      "requirements_desc": "Ensure SysManage server is running on <code>localhost:8001</code> before executing performance tests. The testing framework validates against a live instance for realistic performance metrics."
    },
    "artillery": {
      "title": "Artillery Backend Load Testing",
      "description": "Artillery provides <strong>enterprise-grade load testing</strong> for SysManage's backend APIs, simulating realistic user loads and validating system performance under various traffic patterns.",
      "scenarios_title": "🎯 Load Testing Scenarios",
      "health_title": "Health Check Monitoring",
      "health_desc": "Continuous health endpoint validation (30% of traffic)",
      "auth_title": "Authentication Flow Testing",
      "auth_desc": "JWT authentication performance validation (40% of traffic)",
      "api_title": "Host Management APIs",
      "api_desc": "Core API endpoint performance testing (20% of traffic)",
      "websocket_title": "WebSocket Connection Testing",
      "websocket_desc": "Real-time communication performance validation (10% of traffic)",
      "phases_title": "📈 Load Testing Phases",
      "warmup_title": "🔥 Warm-up Phase",
      "warmup_desc": "10 seconds at 2 requests/second - System initialization",
      "normal_title": "⚡ Normal Load",
      "normal_desc": "30 seconds at 5 requests/second - Typical production load",
      "peak_title": "🚀 Peak Load",
      "peak_desc": "20 seconds at 10 requests/second - High traffic simulation",
      "budgets_title": "💎 Performance Budgets",
      "response_title": "⚡ Response Time",
      "response_p95": "95th percentile: < 500ms",
      "response_p99": "99th percentile: < 1000ms",
      "error_title": "🛡️ Error Rate",
      "error_rate": "Maximum: < 1%",
      "throughput_title": "📊 Throughput",
      "throughput_rate": "Minimum: 8 RPS"
    },
    "playwright": {
      "title": "Playwright Frontend Performance Testing",
      "description": "Playwright provides <strong>comprehensive frontend performance monitoring</strong> focusing on Core Web Vitals and user experience metrics critical for enterprise applications.",
      "metrics_title": "📊 Core Web Vitals Monitoring",
      "fcp_title": "🎨 First Contentful Paint (FCP)",
      "fcp_desc": "Measures when the first content element becomes visible",
      "fcp_target": "Target: < 2000ms",
      "dcl_title": "📄 DOM Content Loaded (DCL)",
      "dcl_desc": "Time for initial HTML document to load and parse",
      "dcl_target": "Target: < 1500ms",
      "load_title": "🌐 Page Load Time",
      "load_desc": "Complete page loading including all resources",
      "load_target": "Target: < 5000ms",
      "memory_title": "💾 Memory Usage",
      "memory_desc": "JavaScript heap memory consumption monitoring",
      "memory_target": "Tracked: JS Heap Size",
      "tests_title": "🧪 Performance Test Scenarios",
      "login_page_title": "🔐 Login Page Performance",
      "login_page_desc": "Comprehensive page load performance and Core Web Vitals validation",
      "login_flow_title": "🚀 Login Flow Performance",
      "login_flow_desc": "Form interaction and authentication response time validation",
      "network_title": "🌐 Network Performance Analysis",
      "network_desc": "Resource loading optimization and network request monitoring",
      "cross_browser_title": "🌍 Cross-Browser Performance Validation",
      "chromium_title": "🟦 Chromium/Chrome",
      "chromium_desc": "Primary testing platform with full performance API support",
      "firefox_title": "🟧 Firefox",
      "firefox_desc": "Cross-browser performance validation and compatibility testing",
      "webkit_title": "🟪 WebKit (macOS)",
      "webkit_desc": "Safari performance testing on macOS environments"
    },
    "ci": {
      "title": "CI/CD Performance Integration",
      "description": "SysManage's performance testing framework integrates seamlessly with <strong>GitHub Actions CI/CD pipelines</strong>, providing automated performance validation on every code change across multiple operating systems.",
      "workflow_title": "🔄 Automated Performance Workflows",
      "trigger_title": "🚀 Trigger Events",
      "trigger_desc": "Performance tests execute on every push to main branch and pull request",
      "matrix_title": "🎯 Matrix Execution",
      "matrix_desc": "Parallel testing across Ubuntu, macOS, and Windows environments",
      "validation_title": "✅ Performance Validation",
      "validation_desc": "Automated performance budget enforcement and regression detection",
      "reporting_title": "📊 Results Reporting",
      "reporting_desc": "Performance metrics exported for trend analysis and monitoring",
      "platform_title": "🌐 Multi-Platform Performance Testing",
      "ubuntu_title": "🐧 Ubuntu Linux",
      "ubuntu_artillery": "Artillery backend load testing",
      "ubuntu_playwright": "Playwright UI performance (Chrome, Firefox)",
      "ubuntu_docker": "Docker container performance validation",
      "macos_title": "🍎 macOS",
      "macos_webkit": "WebKit/Safari performance testing",
      "macos_native": "Native macOS application performance",
      "macos_artillery": "Artillery cross-platform validation",
      "windows_title": "🪟 Windows",
      "windows_edge": "Edge browser performance testing",
      "windows_powershell": "PowerShell environment validation",
      "windows_artillery": "Windows-specific Artillery testing",
      "regression_title": "📈 Performance Regression Detection",
      "baseline_title": "📊 Baseline Comparison",
      "baseline_desc": "Historical performance data comparison with configurable tolerance bands",
      "alerts_title": "🚨 Automated Alerts",
      "alerts_desc": "Immediate notification when performance budgets are exceeded",
      "trends_title": "📈 Trend Analysis",
      "trends_desc": "Long-term performance trend monitoring and capacity planning"
    },
    "enterprise": {
      "title": "Enterprise Performance Features",
      "description": "SysManage's performance testing framework delivers <strong>enterprise-grade capabilities</strong> designed for mission-critical production environments, ensuring optimal performance at scale.",
      "scalability_title": "⚡ Enterprise Scalability Testing",
      "load_title": "🚀 Production Load Simulation",
      "load_realistic": "Realistic user behavior patterns",
      "load_concurrent": "Concurrent user simulation up to 1000+ users",
      "load_scenarios": "Multiple traffic scenario modeling",
      "load_authentication": "Authentication flow stress testing",
      "monitoring_title": "📊 Advanced Performance Monitoring",
      "monitoring_realtime": "Real-time performance metrics collection",
      "monitoring_vitals": "Core Web Vitals compliance validation",
      "monitoring_memory": "Memory leak detection and analysis",
      "monitoring_network": "Network performance optimization insights",
      "compliance_title": "🛡️ SLA Compliance Validation",
      "compliance_budgets": "Configurable performance budgets",
      "compliance_sla": "SLA response time validation",
      "compliance_availability": "High availability testing scenarios",
      "compliance_reporting": "Enterprise-grade reporting and analytics",
      "deployment_title": "🌍 Multi-Environment Deployment Testing",
      "cloud_title": "☁️ Cloud Infrastructure Testing",
      "cloud_desc": "Comprehensive testing across AWS, Azure, GCP, and hybrid cloud environments",
      "cloud_autoscaling": "Auto-scaling validation",
      "cloud_latency": "Cross-region latency testing",
      "cloud_containers": "Container performance optimization",
      "onprem_title": "🏢 On-Premises Enterprise Testing",
      "onprem_desc": "Dedicated testing for enterprise data center deployments",
      "onprem_hardware": "Hardware-specific optimization",
      "onprem_security": "Security compliance validation",
      "onprem_integration": "Legacy system integration testing",
      "hybrid_title": "🔄 Hybrid Architecture Testing",
      "hybrid_desc": "Complex hybrid cloud and multi-cloud deployment validation",
      "hybrid_connectivity": "Inter-cloud connectivity testing",
      "hybrid_failover": "Disaster recovery validation",
      "hybrid_sync": "Data synchronization performance",
      "analytics_title": "📈 Enterprise Analytics & Reporting",
      "dashboards_title": "📊 Executive Dashboards",
      "dashboards_desc": "Real-time performance KPIs and executive-level reporting for informed decision making",
      "capacity_title": "📈 Capacity Planning",
      "capacity_desc": "Predictive analytics for infrastructure scaling and resource optimization",
      "cost_title": "💰 Cost Optimization",
      "cost_desc": "Performance-driven cost analysis and infrastructure efficiency recommendations",
      "compliance_analytics_title": "🔒 Compliance Reporting",
      "compliance_analytics_desc": "Automated compliance validation and audit trail generation for enterprise governance",
      "value_title": "💎 Enterprise Value Proposition",
      "value_desc": "SysManage's performance testing framework provides <strong>measurable ROI</strong> through reduced downtime, optimized infrastructure costs, improved user satisfaction, and enterprise-grade reliability that scales with your organization's growth.",
      "uptime_value": "99.9%",
      "uptime_label": "Uptime Reliability",
      "response_value": "<500ms",
      "response_label": "Average Response Time",
      "cost_value": "30%",
      "cost_label": "Infrastructure Cost Reduction"
    }
  },
  "agent_installation": {
    "title": "Agent Installation Guide - SysManage",
    "description": "Complete installation guide for SysManage agent across Linux, Windows, macOS, FreeBSD, and OpenBSD platforms.",
    "breadcrumb": {
      "documentation": "Documentation",
      "agent": "Agent",
      "installation": "Installation"
    },
    "header": {
      "title": "Agent Installation Guide",
      "subtitle": "Complete step-by-step installation guide for deploying SysManage agents across all supported platforms."
    },
    "requirements": {
      "title": "System Requirements",
      "python": {
        "title": "🐍 Python",
        "required": "Required:",
        "version": "3.9, 3.11, or 3.12",
        "note": "Note: Python 3.13 is NOT yet supported due to package compatibility"
      },
      "os": {
        "title": "💻 Operating System",
        "supported": "Supported:",
        "platforms": "Linux (Ubuntu, CentOS/RHEL, openSUSE, SLES), Windows, macOS, FreeBSD, OpenBSD, NetBSD",
        "description": "Cross-platform compatibility"
      },
      "network": {
        "title": "🌐 Network Access",
        "required": "Required:",
        "description": "Outbound HTTPS access to SysManage Server",
        "ports": "No inbound ports required"
      },
      "privileges": {
        "title": "🛡️ Privileges",
        "optional": "Optional:",
        "description": "Administrative rights for system management",
        "limitation": "Can run as regular user with limitations"
      }
    },
    "prerequisites": {
      "title": "Platform-Specific Prerequisites",
      "ubuntu": {
        "title": "Ubuntu 22.04 - 24.10",
        "tab": "Ubuntu/Debian"
      },
      "ubuntu25": {
        "title": "Ubuntu 25.04+ (Python 3.12 from Source)",
        "tab": "Ubuntu 25.04+",
        "note": "Note:",
        "note_text": "Ubuntu 25.04+ only ships with Python 3.13. You must build Python 3.12 from source:"
      },
      "centos": {
        "title": "CentOS/RHEL/Fedora",
        "tab": "CentOS/RHEL"
      },
      "macos": {
        "title": "macOS",
        "tab": "macOS"
      },
      "windows": {
        "title": "Windows",
        "tab": "Windows",
        "step1": {
          "title": "Python 3.9-3.12:",
          "download": "Download from",
          "avoid": "AVOID Python 3.13",
          "avoid_reason": "Package compatibility issues",
          "check_path": "Check \"Add Python to PATH\" during installation",
          "sqlite_included": "SQLite3 is included with Python on Windows"
        },
        "step2": {
          "title": "Rust:",
          "download": "Download from",
          "instruction": "Run rustup-init.exe and follow prompts"
        },
        "step3": {
          "title": "Git for Windows:",
          "download": "Download from",
          "description": "Includes build tools needed for Python packages"
        },
        "step4": {
          "title": "Windows Build Tools (if needed):",
          "download": "Download"
        }
      },
      "freebsd": {
        "title": "FreeBSD",
        "tab": "FreeBSD"
      },
      "openbsd": {
        "title": "OpenBSD",
        "tab": "OpenBSD",
        "important_title": "⚠️ Important for OpenBSD",
        "important_text": "Rust is absolutely required for building cryptography packages. The agent uses certificate-based authentication which requires cryptography support for security."
      },
      "netbsd": {
        "title": "NetBSD",
        "tab": "NetBSD",
        "important_title": "⚠️ Important for NetBSD",
        "important_text": "Rust is absolutely required for building cryptography packages. The agent uses certificate-based authentication which requires cryptography support for security."
      },
      "opensuse": {
        "title": "openSUSE Leap/Tumbleweed",
        "tab": "openSUSE",
        "note_title": "📦 Package Manager Notes",
        "leap_note": "openSUSE Leap:",
        "leap_desc": "Uses stable packages, may need manual Rust installation",
        "tumbleweed_note": "openSUSE Tumbleweed:",
        "tumbleweed_desc": "Rolling release, Rust available via zypper",
        "python_note": "Python versions:",
        "python_desc": "Leap ships with Python 3.9+, Tumbleweed with latest stable"
      },
      "sles": {
        "title": "SUSE Linux Enterprise Server (SLES)",
        "tab": "SLES",
        "note_title": "🏢 Enterprise Considerations",
        "sles12": "SLES 12:",
        "sles12_desc": "May require Software Collections (SCL) for newer Python",
        "sles15": "SLES 15:",
        "sles15_desc": "Python 3.6+ included, but 3.9+ recommended",
        "firewall": "Firewall:",
        "firewall_desc": "SuSEfirewall2 or firewalld may block agent ports",
        "selinux": "SELinux:",
        "selinux_desc": "May require policy adjustments if enabled",
        "subscription": "Subscription:",
        "subscription_desc": "Some packages require active SLES subscription"
      }
    },
    "installation": {
      "title": "Installation Methods",
      "method1": {
        "title": "Method 1: From Source (Recommended)"
      },
      "method2": {
        "title": "Method 2: Direct Installation"
      }
    },
    "openbsd_notes": {
      "title": "OpenBSD-Specific Installation Notes",
      "description": "OpenBSD users require special attention to Rust installation:",
      "security_note_title": "🔐 Security Note",
      "security_note_text": "The agent requires cryptography support for secure certificate-based authentication. Rust is mandatory for building these security packages. The run script automatically detects if Rust is available and uses appropriate installation methods."
    },
    "configuration": {
      "title": "Configuration",
      "auto_discovery": {
        "title": "Auto-Discovery (Recommended)",
        "description": "SysManage Agent includes automatic server discovery that eliminates manual configuration:",
        "how_it_works": "🔍 How Auto-Discovery Works",
        "step1": "No Configuration Required:",
        "step1_desc": "If no configuration file exists, the agent automatically attempts to discover servers",
        "step2": "Network Scanning:",
        "step2_desc": "Sends UDP broadcast discovery requests and listens for server announcements",
        "step3": "Server Evaluation:",
        "step3_desc": "Uses scoring system (SSL preference, local network preference)",
        "step4": "Automatic Configuration:",
        "step4_desc": "Writes complete configuration file and starts normal operation",
        "network_ports": "🌐 Required Network Ports",
        "agent_ports": "Agent Ports (Outbound):",
        "udp_31337": "UDP 31337",
        "udp_31337_desc": "Send discovery requests to servers",
        "udp_31338": "UDP 31338",
        "udp_31338_desc": "Listen for server announcements",
        "tcp_6443": "TCP 6443",
        "tcp_6443_desc": "(or server port) - HTTPS connections to discovered server"
      },
      "manual": {
        "title": "Manual Configuration (Alternative)",
        "generator_title": "💡 Configuration Generator Available",
        "generator_text": "Use the interactive",
        "generator_link": "Configuration Builder Tool",
        "generator_suffix": "to generate customized agent configuration files for your environment.",
        "create_text": "Or create configuration file manually at:",
        "linux_path": "Linux/macOS/BSD:",
        "windows_path": "Windows:"
      }
    },
    "permissions": {
      "title": "Required Directories and Permissions",
      "certificate": {
        "title": "Certificate Storage",
        "linux_path": "Linux/macOS/BSD:",
        "windows_path": "Windows:"
      },
      "config": {
        "title": "Configuration File"
      },
      "log": {
        "title": "Log Directory"
      },
      "user": {
        "title": "Service User Account"
      },
      "dev_note_title": "📝 Development Note",
      "dev_note_text": "During development and testing, the application automatically detects test environments and uses temporary directories to avoid permission issues."
    },
    "running": {
      "title": "Running the Agent",
      "development": {
        "title": "Development Mode"
      },
      "options": {
        "title": "Command Line Options"
      }
    },
    "service": {
      "title": "Service Installation",
      "systemd": {
        "tab": "Linux (systemd)",
        "create_title": "Create systemd service file",
        "create_text": "Create",
        "enable_title": "Enable and start service"
      },
      "opensuse": {
        "tab": "openSUSE/SLES",
        "service_title": "openSUSE/SLES systemd service",
        "create_text": "Create",
        "commands_title": "Service management commands",
        "note_title": "🏢 SUSE Enterprise Notes",
        "firewall": "Firewall:",
        "firewall_desc": "Open required ports via YaST or firewall-cmd",
        "selinux": "SELinux:",
        "selinux_desc": "May require setsebool or custom policies",
        "apparmor": "AppArmor:",
        "apparmor_desc": "SUSE uses AppArmor instead of SELinux by default",
        "logging": "Logging:",
        "logging_desc": "Logs available via journalctl or /var/log/messages"
      },
      "windows": {
        "tab": "Windows Service",
        "title": "Windows Service Installation"
      },
      "macos": {
        "tab": "macOS (launchd)",
        "create_title": "Create launchd service",
        "create_text": "Create",
        "load_title": "Load the service"
      }
    },
    "troubleshooting": {
      "title": "Troubleshooting",
      "connection": {
        "title": "Connection Issues",
        "server": "Server connectivity:",
        "dns": "DNS resolution:",
        "ssl": "SSL certificate:"
      },
      "permission": {
        "title": "Permission Issues",
        "check_user": "Check agent user permissions:",
        "verify_file": "Verify file permissions:",
        "check_log": "Check log file access:"
      },
      "packages": {
        "title": "Python Package Issues",
        "crypto": "Cryptography build errors:",
        "crypto_desc": "Ensure Rust is installed and in PATH",
        "missing": "Missing dependencies:",
        "missing_desc": "Install build tools and development libraries",
        "python313": "Python 3.13 compatibility:",
        "python313_desc": "Use Python 3.11 or 3.12 instead"
      },
      "discovery": {
        "title": "Auto-Discovery Issues",
        "ports": "Ensure UDP ports 31337 and 31338 are accessible",
        "firewall": "Check firewall rules on both agent and server",
        "service": "Verify server discovery service is enabled"
      }
    },
    "navigation": {
      "prev": "← Agent Documentation",
      "next": "Configuration Guide →"
    }
  }
}